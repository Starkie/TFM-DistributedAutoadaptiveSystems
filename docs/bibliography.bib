
@inproceedings{dashofyUsingOfftheshelfMiddleware1999a,
  title = {Using Off-the-Shelf Middleware to Implement Connectors in Distributed Software Architectures},
  booktitle = {Proceedings of the 1999 {{International Conference}} on {{Software Engineering}} ({{IEEE Cat}}. {{No}}.{{99CB37002}})},
  author = {Dashofy, E.M. and Medvidovic, N. and Taylor, R.N.},
  year = {1999},
  month = may,
  pages = {3--12},
  issn = {0270-5257},
  doi = {10.1145/302405.302407},
  abstract = {Software architectures promote development focused on modular building blocks and their interconnections. Since architecture-level components often contain complex functionality, it is reasonable to expect that their interactions will also be complex. Modeling and implementing software connectors thus becomes a key aspect of architecture-based development. Software interconnection and middleware technologies such as RMI, CORBA, ILU, and ActiveX provide a valuable service in building applications from components. The relation of such services to software connectors in the context of software architectures, however, is not well understood. To understand the tradeoffs among these technologies with respect to architectures, we have evaluated several off-the-shelf middleware technologies and identified key techniques for utilizing them in implementing software connectors. Our platform for investigation was C2, a component- and message-based architectural style. By encapsulating middleware functionality within software connectors, we have coupled C2's existing benefits such as component interchangeability, substrate independence and structural guidance with new capabilities of multi-lingual, multi-process and distributed application development in a manner that is transparent to architects.},
  keywords = {Application software,Computer architecture,Computer languages,Computer science,Connectors,LAN interconnection,Middleware,Object oriented modeling,Protocols,Software architecture},
  file = {/home/adriano/Zotero/storage/TBAB45EA/Dashofy et al. - 1999 - Using off-the-shelf middleware to implement connec.pdf;/home/adriano/Zotero/storage/IM635ALX/840990.html}
}

@misc{EventDrivenArchitecturesAsyncAPI,
  title = {Event-{{Driven Architectures}} | {{AsyncAPI Initiative}} for Event-Driven {{APIs}}},
  abstract = {Many developers, architects, and product managers have used REST APIs and are familiar with the synchronous communication paradigm. You make a request and wait for the response. This is exactly how th},
  howpublished = {https://www.asyncapi.com/docs/getting-started/undefined/docs/getting-started/event-driven-architectures},
  file = {/home/adriano/Zotero/storage/K44GKYGC/event-driven-architectures.html}
}

@inbook{garlanINTRODUCTIONSOFTWAREARCHITECTURE1993,
  title = {{{AN INTRODUCTION TO SOFTWARE ARCHITECTURE}}},
  booktitle = {Series on {{Software Engineering}} and {{Knowledge Engineering}}},
  author = {Garlan, David and Shaw, Mary},
  year = {1993},
  month = dec,
  volume = {2},
  pages = {1--39},
  publisher = {{WORLD SCIENTIFIC}},
  doi = {10.1142/9789812798039_0001},
  abstract = {This work was funded in part by the Department of Defense Advanced Research Project Agency under grant MDA972-92-J-1002, by National Science Foundation Grants CCR-9109469 and CCR-9112880, and by a grant from Siemens Corporate Research. It was also funded in part by the Carnegie Mellon University School of Computer Science and Software Engineering Institute (which is sponsored by the U.S. Department of Defense). The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the U.S. Government, the Department of Defense, the National Science Foundation, Siemens Corporation, or Carnegie Mellon University.},
  collaborator = {Ambriola, Vincenzo and Tortora, Genoveffa},
  isbn = {978-981-02-1594-1 978-981-279-803-9},
  langid = {english},
  file = {/home/adriano/Zotero/storage/DQPDIJPY/Garlan and Shaw - 1993 - AN INTRODUCTION TO SOFTWARE ARCHITECTURE.pdf}
}

@misc{gotoconferencesManyMeaningsEventDriven2017,
  title = {The {{Many Meanings}} of {{Event}}-{{Driven Architecture}} \textbullet{} {{Martin Fowler}} \textbullet{} {{GOTO}} 2017},
  author = {{GOTO Conferences}},
  year = {2017},
  month = may,
  abstract = {This presentation was recorded at GOTO Chicago 2017. \#GOTOcon \#GOTOchgo http://gotochgo.com Martin Fowler - Author, Speaker, Consultant and General Loud-mouth on Software Development ABSTRACT During my career, I've often people heard people describe their systems as "event-driven". But when looking deeper that phrase seems to lead to some very different architectural assumptions. On a recent workshop we identified four different patterns [...] TIMECODES 0:00 What people mean by EDA 00:51 How he came to write down common patterns of EDA and hold this talk 02:45 4 patterns detected 03:20 Pattern 1: Event Notification 08:33 Events vs Commands 11:30 Pro: Decoupling 13:50 Contra: inability to understand what is going on by stepping through the code 14:53 Pattern 2: Event-carried State Transfer 20:51 Pattern 3: Event Sourcing 32:11 Can be a very nice system development-wise 33:43 Downside of Event Sourcing 38:46 Which events to record in the event store? 43:31 Pattern 4: CQRS 47:39 Conclusion : How to use the knowledge about those 4 patterns Read the full abstract here: https://gotochgo.com/2017/sessions/47 RECOMMENDED BOOKS Martin Fowler \& Pramod Sadalage \textbullet{} NoSQL Distilled \textbullet{} https://amzn.to/3ChIpu7 Martin Fowler \textbullet{} Patterns of Enterprise Application Architecture \textbullet{} https://amzn.to/3lp4sIq Martin Fowler \textbullet{} Domain-Specific Languages \textbullet{} https://amzn.to/3nzOIFk Martin Fowler \textbullet{} UML Distilled \textbullet{} https://amzn.to/3kahjyA Martin Fowler \textbullet{} Analysis Patterns \textbullet{} https://amzn.to/3Emabar https://twitter.com/gotochgo https://www.facebook.com/GOTOConference \#EventDrivenArchitecture \#EventDriven \#SoftwareArchitecture Looking for a unique learning experience? Attend the next GOTO Conference near you! Get your ticket at http://gotocon.com SUBSCRIBE TO OUR CHANNEL - new videos posted almost daily. https://www.youtube.com/user/GotoConf...}
}

@inproceedings{mehtaTaxonomySoftwareConnectors2000,
  title = {Towards a Taxonomy of Software Connectors},
  booktitle = {Proceedings of the 22nd International Conference on {{Software}} Engineering},
  author = {Mehta, Nikunj R. and Medvidovic, Nenad and Phadke, Sandeep},
  year = {2000},
  month = jun,
  series = {{{ICSE}} '00},
  pages = {178--187},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/337180.337201},
  abstract = {Software systems of today are frequently composed from prefabricated, heterogeneous components that provide complex functionality and engage in complex interactions. Existing research on component-based development has mostly focused on component structure, interfaces, and functionality. Recently, software architecture has emerged as an area that also places significant importance on component interactions, embodied in the notion of software connectors. However, the current level of understanding and support for connectors has been insufficient. This has resulted in their inconsistent treatment and a notable lack of understanding of what the fundamental building blocks of software interaction are and how they can be composed into more complex interactions. This paper attempts to address this problem. It presents a comprehensive classification framework and taxonomy of software connectors. The taxonomy is obtained through an extensive analysis of existing component interactions. The taxonomy is used both to understand existing software connectors and to suggest new, unprecedented connectors. We demonstrate the use of the taxonomy on the architecture of a large, existing system.},
  isbn = {978-1-58113-206-9},
  keywords = {classification,software architecture,software connector,taxonomy},
  file = {/home/adriano/Zotero/storage/MNVGKGMD/Mehta and Phadke - Towards a Taxonomy of Software Connectors.pdf}
}

@misc{OpenAPISpecificationV3,
  title = {{{OpenAPI Specification}} v3.1.0 | {{Introduction}}, {{Definitions}}, \& {{More}}},
  howpublished = {https://spec.openapis.org/oas/latest.html},
  file = {/home/adriano/Zotero/storage/ZX5393IT/latest.html}
}

@misc{ServiceDesignPatterns,
  title = {Service {{Design Patterns}} - {{Web Service Infrastructures}} - {{Service Connector}}},
  howpublished = {http://www.servicedesignpatterns.com/webserviceinfrastructures/serviceconnector},
  file = {/home/adriano/Zotero/storage/EISQQFJI/serviceconnector.html}
}

@book{SoftwareArchitectureFoundations,
  title = {Software {{Architecture}}: Foundations, {{Theory}}, and {{Practice}}},
  shorttitle = {Software {{Architecture}}},
  abstract = {Software architecture is foundational to the development of large, practical software-intensive applications. This brand-new text covers all facets of software architecture and how it serves as...},
  isbn = {978-0-470-16774-8},
  langid = {english}
}

@misc{sunaysvCreateCustomConnector,
  title = {Create a Custom Connector from an {{OpenAPI}} Definition},
  author = {{sunaysv}},
  abstract = {Use an OpenAPI definition to create a custom connector for Azure Logic Apps, Power Automate, and Power Apps},
  howpublished = {https://docs.microsoft.com/en-us/connectors/custom-connectors/define-openapi-definition},
  langid = {american},
  file = {/home/adriano/Zotero/storage/F6QWFHS2/define-openapi-definition.html}
}

@misc{sunaysvCustomConnectorsOverview,
  title = {Custom Connectors Overview},
  author = {{sunaysv}},
  abstract = {Overview about creating custom connectors for supporting and expanding integration scenarios.},
  howpublished = {https://docs.microsoft.com/en-us/connectors/custom-connectors/},
  langid = {american},
  file = {/home/adriano/Zotero/storage/8866FPKA/custom-connectors.html}
}

@inproceedings{xuBlockchainSoftwareConnector2016,
  title = {The {{Blockchain}} as a {{Software Connector}}},
  booktitle = {2016 13th {{Working IEEE}}/{{IFIP Conference}} on {{Software Architecture}} ({{WICSA}})},
  author = {Xu, Xiwei and Pautasso, Cesare and Zhu, Liming and Gramoli, Vincent and Ponomarev, Alexander and Tran, An Binh and Chen, Shiping},
  year = {2016},
  month = apr,
  pages = {182--191},
  doi = {10.1109/WICSA.2016.21},
  abstract = {Blockchain is an emerging technology for decentralized and transactional data sharing across a large network of untrusted participants. It enables new forms of distributed software architectures, where components can find agreements on their shared states without trusting a central integration point or any particular participating components. Considering the blockchain as a software connector helps make explicitly important architectural considerations on the resulting performance and quality attributes (for example, security, privacy, scalability and sustainability) of the system. Based on our experience in several projects using blockchain, in this paper we provide rationales to support the architectural decision on whether to employ a decentralized blockchain as opposed to other software solutions, like traditional shared data storage. Additionally, we explore specific implications of using the blockchain as a software connector including design trade-offs regarding quality attributes.},
  keywords = {Architecture connector,Australia,Blockchain,Connectors,Contracts,Cryptography,Design,Online banking,Peer-to-peer computing,Software,Trade-off},
  file = {/home/adriano/Zotero/storage/FFPYL4JR/Xu et al. - 2016 - The Blockchain as a Software Connector.pdf;/home/adriano/Zotero/storage/WGSH6LS4/7516828.html}
}


