
@inproceedings{aljahdaliMultitenancyCloudComputing2014,
  title = {Multi-Tenancy in {{Cloud Computing}}},
  booktitle = {2014 {{IEEE}} 8th {{International Symposium}} on {{Service Oriented System Engineering}}},
  author = {AlJahdali, Hussain and Albatli, Abdulaziz and Garraghan, Peter and Townend, Paul and Lau, Lydia and Xu, Jie},
  year = {2014},
  month = apr,
  pages = {344--351},
  doi = {10.1109/SOSE.2014.50},
  abstract = {As Cloud Computing becomes the trend of information technology computational model, the Cloud security is becoming a major issue in adopting the Cloud where security is considered one of the most critical concerns for the large customers of Cloud (i.e. governments and enterprises). Such valid concern is mainly driven by the Multi-Tenancy situation which refers to resource sharing in Cloud Computing and its associated risks where confidentiality and/or integrity could be violated. As a result, security concerns may harness the advancement of Cloud Computing in the market. So, in order to propose effective security solutions and strategies a good knowledge of the current Cloud implementations and practices, especially the public Clouds, must be understood by professionals. Such understanding is needed in order to recognize attack vectors and attack surfaces. In this paper we will propose an attack model based on a threat model designed to take advantage of Multi-Tenancy situation only. Before that, a clear understanding of Multi-Tenancy, its origin and its benefits will be demonstrated. Also, a novel way on how to approach Multi-Tenancy will be illustrated. Finally, we will try to sense any suspicious behavior that may indicate to a possible attack where we will try to recognize the proposed attack model empirically from Google trace logs. Google trace logs are a 29-day worth of data released by Google. The data set was utilized in reliability and power consumption studies, but not been utilized in any security study to the extent of our knowledge.},
  keywords = {Attack Models,Cloud computing,Cloud Computing,Cloud Data,Computational modeling,Databases,Multi-Tenancy,Resource management,Security,Servers,Virtualization},
  file = {/home/adriano/Zotero/storage/I5UKFSG4/AlJahdali et al. - 2014 - Multi-tenancy in Cloud Computing.pdf}
}

@inproceedings{birmanAddingHighAvailability2004,
  title = {Adding High Availability and Autonomic Behavior to {{Web}} Services},
  booktitle = {Proceedings. 26th {{International Conference}} on {{Software Engineering}}},
  author = {Birman, K. and {van Renesse}, R. and Vogels, W.},
  year = {2004},
  month = may,
  pages = {17--26},
  issn = {0270-5257},
  doi = {10.1109/ICSE.2004.1317410},
  abstract = {Rapid acceptance of the Web Services architecture promises to make it the most widely supported and popular object-oriented architecture to date. One consequence is that a wave of mission-critical Web Services applications will certainly be deployed in coming years. Yet the reliability options available within Web Services are limited in important ways. To use a term proposed by IBM, Web Services systems need to become far more autonomic, configuring themselves, diagnosing faults, and managing themselves. High availability applications need more attention. Moreover, the scenarios in which such issues arise often entail very large deployments, raising questions of scalability. In this paper we propose a path by which the architecture could be extended in these respects.},
  keywords = {Availability,Computer applications,Computer architecture,Computer science,Delay,Mission critical systems,Scalability,Security,Service oriented architecture,Web services},
  file = {/home/adriano/Zotero/storage/MFI6DED9/Birman et al. - 2004 - Adding high availability and autonomic behavior to.pdf}
}

@inproceedings{britoRESTVsGraphQL2020,
  title = {{{REST}} vs {{GraphQL}}: {{A Controlled Experiment}}},
  shorttitle = {{{REST}} vs {{GraphQL}}},
  booktitle = {2020 {{IEEE International Conference}} on {{Software Architecture}} ({{ICSA}})},
  author = {Brito, Gleison and Valente, Marco Tulio},
  year = {2020},
  month = mar,
  pages = {81--91},
  doi = {10.1109/ICSA47634.2020.00016},
  abstract = {GraphQL is a novel query language for implementing service-based software architectures. The language is gaining momentum and it is now used by major software companies, such as Facebook and GitHub. However, we still lack empirical evidence on the real gains achieved by GraphQL, particularly in terms of the effort required to implement queries in this language. Therefore, in this paper we describe a controlled experiment with 22 students (10 undergraduate and 12 graduate), who were asked to implement eight queries for accessing a web service, using GraphQL and REST. Our results show that GraphQL requires less effort to implement remote service queries when compared to REST (9 vs 6 minutes, median times). These gains increase when REST queries include more complex endpoints, with several parameters. Interestingly, GraphQL outperforms REST even among more experienced participants (as is the case of graduate students) and among participants with previous experience in REST, but no previous experience in GraphQL.},
  keywords = {Database languages,Facebook,GraphQL,REST,Servers,Standards,Task analysis,Uniform resource locators,Web APIs,Web services},
  file = {/home/adriano/Zotero/storage/VJNE4T8K/2003.04761.pdf;/home/adriano/Zotero/storage/QDM8X44M/9101226.html}
}

@incollection{brunEngineeringSelfAdaptiveSystems2009,
  title = {Engineering {{Self-Adaptive Systems}} through {{Feedback Loops}}},
  booktitle = {Software {{Engineering}} for {{Self-Adaptive Systems}}},
  author = {Brun, Yuriy and Di Marzo Serugendo, Giovanna and Gacek, Cristina and Giese, Holger and Kienle, Holger and Litoiu, Marin and M{\"u}ller, Hausi and Pezz{\`e}, Mauro and Shaw, Mary},
  editor = {Cheng, Betty H. C. and {de Lemos}, Rog{\'e}rio and Giese, Holger and Inverardi, Paola and Magee, Jeff},
  year = {2009},
  pages = {48--70},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-02161-9_3},
  abstract = {To deal with the increasing complexity of software systems and uncertainty of their environments, software engineers have turned to self-adaptivity. Self-adaptive systems are capable of dealing with a continuously changing environment and emerging requirements that may be unknown at design-time. However, building such systems cost-effectively and in a predictable manner is a major engineering challenge. In this paper, we explore the state-of-the-art in engineering self-adaptive systems and identify potential improvements in the design process.},
  isbn = {978-3-642-02161-9},
  langid = {english},
  file = {/home/adriano/Zotero/storage/WXMRWM9B/Brun09_EngineeringSelfAdaptiveSystemsThrougFeedbackLoops.pdf}
}

@book{burnsDesigningDistributedSystems2018,
  title = {Designing {{Distributed Systems}}},
  author = {Burns, Brendan},
  year = {2018},
  month = feb,
  publisher = {{O'Reilly Media}},
  url = {https://learning.oreilly.com/library/view/designing-distributed-systems/9781491983638/},
  urldate = {2022-01-15},
  abstract = {Without established design patterns to guide them, developers have had to build distributed systems from scratch, and most of these systems are very unique indeed. Today, the increasing use of...},
  isbn = {978-1-4919-8363-8},
  langid = {english},
  file = {/home/adriano/Zotero/storage/8S4VCDKX/9781491983638.html}
}

@mastersthesis{climentpenadesDissenyPrototipatSolucions2020a,
  title = {{Disseny i prototipat de solucions autoadaptatives emprant arquitectures basades en microserveis. Una aplicaci\'o industrial pr\`actica}},
  author = {Climent Penad{\'e}s, Jos{\'e}},
  year = {2020},
  month = oct,
  address = {{Valencia}},
  url = {https://riunet.upv.es/handle/10251/153180},
  urldate = {2022-07-15},
  abstract = {[CA] Les arquitectures basades en microserveis (\textmu serveis) ofereixen un enfoc modern per al  desenvolupament de solucions de programari que operen de manera natural distribu\"ides en la  xarxa, i que sorgeixen amb l'objectiu d'oferir una flexibilitat computacional alta. Per a aix\`o,  aquest tipus d'infraestructures proveeixen de mecanismes per a dissenyar i desplegar solucions  que puguen replicar-se (clonar-se, duplicar-se) o replegar-se (contraure's) din\`amicament,  adaptant-se en funci\'o de la c\`arrega de treball o ``c\`arrega computacional'' que tinguen a cada  moment.  No obstant aix\`o, aquest tipus de solucions nom\'es tenen en compte aspectes d'adaptaci\'o en  funci\'o d'aquesta c\`arrega computacional din\`amica. Existeixen dominis (per exemple, el de  Internet de les Coses), tamb\'e din\`amics, on l'aplicaci\'o d'aquest tipus d'infraestructures podria  proveir un entorn de computaci\'o adaptable a aspectes o requisits funcionals i operatius. En  l'actualitat, no \'es habitual dissenyar i desenvolupar programari amb capacitats de computaci\'o  aut\`onoma, \'es a dir, capa\c{c}os d'adaptar-se per a funcionar de manera \`optima en funci\'o del seu  context operatiu.  En aquest projecte es pretenen integrar, des d'un punt de vista pr\`actic, t\`ecniques que  provenen de la teoria de control, utilitzant bucles de control per a incorporar capacitats  d'adaptaci\'o als sistemes. En concret, s'utilitzar\`a l'aproximaci\'o FADA (desenvolupada pel grup  Tatami del Centre d'investigaci\'o PROS) que proposa un enfocament pr\`actic per a desenvolupar  programari autoadaptatiu aplicant els conceptes de la computaci\'o aut\`onoma a trav\'es de bucles de  control MAPE-K.  S'abordar\`a el disseny d'una xicoteta soluci\'o basada en \textmu serveis que puga canviar la seua  configuraci\'o operativa i de desplegament, de manera din\`amica. Ens centrarem en identificar  situacions que requerisquen canvis en una infraestructura de \textmu serveis i definirem operacions de  canvi de la configuraci\'o de la soluci\'o a trav\'es de canvis en el propi desplegament de \textmu serveis.  S'obtindr\`a el disseny basat en \textmu serveis d'una soluci\'o basada en el domini real de la f\`abrica  Embalpack, on les capacitats de computaci\'o aut\`onoma i d'autoadaptaci\'o siguen part del  problema. Finalment, s'obtindr\`a un prototip funcional basat en l'aproximaci\'o FADA que done  resposta al problema proposat en la mesura que siga possible.},
  copyright = {Reserva de todos los derechos},
  langid = {Catal\'an},
  school = {Universitat Polit\`ecnica de Val\`encia},
  annotation = {Accepted: 2020-10-26T13:02:56Z},
  file = {/home/adriano/Zotero/storage/B5FX8J56/Climent Penadés - 2020 - Disseny i prototipat de solucions autoadaptatives .pdf;/home/adriano/Zotero/storage/WE5UWQHM/153180.html}
}

@inproceedings{dashofyUsingOfftheshelfMiddleware1999a,
  title = {Using Off-the-Shelf Middleware to Implement Connectors in Distributed Software Architectures},
  booktitle = {Proceedings of the 1999 {{International Conference}} on {{Software Engineering}} ({{IEEE Cat}}. {{No}}.{{99CB37002}})},
  author = {Dashofy, E.M. and Medvidovic, N. and Taylor, R.N.},
  year = {1999},
  month = may,
  pages = {3--12},
  issn = {0270-5257},
  doi = {10.1145/302405.302407},
  abstract = {Software architectures promote development focused on modular building blocks and their interconnections. Since architecture-level components often contain complex functionality, it is reasonable to expect that their interactions will also be complex. Modeling and implementing software connectors thus becomes a key aspect of architecture-based development. Software interconnection and middleware technologies such as RMI, CORBA, ILU, and ActiveX provide a valuable service in building applications from components. The relation of such services to software connectors in the context of software architectures, however, is not well understood. To understand the tradeoffs among these technologies with respect to architectures, we have evaluated several off-the-shelf middleware technologies and identified key techniques for utilizing them in implementing software connectors. Our platform for investigation was C2, a component- and message-based architectural style. By encapsulating middleware functionality within software connectors, we have coupled C2's existing benefits such as component interchangeability, substrate independence and structural guidance with new capabilities of multi-lingual, multi-process and distributed application development in a manner that is transparent to architects.},
  keywords = {Application software,Computer architecture,Computer languages,Computer science,Connectors,LAN interconnection,Middleware,Object oriented modeling,Protocols,Software architecture},
  file = {/home/adriano/Zotero/storage/TBAB45EA/Dashofy et al. - 1999 - Using off-the-shelf middleware to implement connec.pdf;/home/adriano/Zotero/storage/IM635ALX/840990.html}
}

@book{delatorreNETMicroservicesArchitecture2021,
  title = {.{{NET Microservices}}: {{Architecture}} for {{Containerized}} .{{NET Applications}}},
  author = {{De la Torre}, C{\'e}sar and Wagner, Bill and Rousos, Mike},
  year = {2021},
  month = dec,
  edition = {6.0 Release},
  publisher = {{Microsoft Corporation}}
}

@article{dobsonSurveyAutonomicCommunications2006,
  title = {A Survey of Autonomic Communications},
  author = {Dobson, Simon and Denazis, Spyros and Fern{\'a}ndez, Antonio and Ga{\"i}ti, Dominique and Gelenbe, Erol and Massacci, Fabio and Nixon, Paddy and Saffre, Fabrice and Schmidt, Nikita and Zambonelli, Franco},
  year = {2006},
  month = dec,
  journal = {ACM Transactions on Autonomous and Adaptive Systems},
  volume = {1},
  number = {2},
  pages = {223--259},
  issn = {1556-4665},
  doi = {10.1145/1186778.1186782},
  abstract = {Autonomic communications seek to improve the ability of network and services to cope with unpredicted change, including changes in topology, load, task, the physical and logical characteristics of the networks that can be accessed, and so forth. Broad-ranging autonomic solutions require designers to account for a range of end-to-end issues affecting programming models, network and contextual modeling and reasoning, decentralised algorithms, trust acquisition and maintenance---issues whose solutions may draw on approaches and results from a surprisingly broad range of disciplines. We survey the current state of autonomic communications research and identify significant emerging trends and techniques.},
  keywords = {Autonomic communication},
  file = {/home/adriano/Zotero/storage/XFQEBDLR/Dobson et al. - 2006 - A survey of autonomic communications.pdf}
}

@misc{EventDrivenArchitecturesAsyncAPI,
  title = {Event-{{Driven Architectures}} | {{AsyncAPI Initiative}} for Event-Driven {{APIs}}},
  url = {https://www.asyncapi.com/docs/getting-started/undefined/docs/getting-started/event-driven-architectures},
  urldate = {2021-10-10},
  abstract = {Many developers, architects, and product managers have used REST APIs and are familiar with the synchronous communication paradigm. You make a request and wait for the response. This is exactly how th},
  file = {/home/adriano/Zotero/storage/K44GKYGC/event-driven-architectures.html}
}

@misc{fonsEspecificacionSistemasAutoadaptativos2021,
  title = {Especificaci\'on de Sistemas Auto-Adaptativos},
  author = {Fons, Joan},
  year = {2021},
  month = mar,
  file = {/home/adriano/Zotero/storage/27XFCKAA/Fons - 2021 - Especificación de sistemas auto-adaptativos.pdf}
}

@inproceedings{fonsServiciosAdaptivereadyPara2021,
  title = {{Servicios adaptive-ready para la reconfiguraci\'on din\'amica de arquitecturas de microservicios}},
  shorttitle = {{JCIS2021}},
  booktitle = {{Actas de las XVI Jornadas de Ingenier\'ia de Ciencia e Ingenier\'ia de Servicios}},
  author = {Fons, Joan and Pelechano, Vicente and Gil, Miriam and Albert, Manoli},
  year = {2021},
  publisher = {{SISTEDES}},
  doi = {http://hdl.handle.net/11705/JCIS/2021/023},
  abstract = {Las arquitecturas de microservicios ofrecen un enfoque para la ingenier\'ia de sistemas complejos y distribuidos en donde la escalabilidad y disponibilidad de las soluciones es un factor cr\'itico.En la \'ultima d\'ecada han surgido herramientas (orquestadores) orientadas a monitorizar y mantener de manera autom\'atica estas infraestructuras para garantizar la calidad del servicio.Sin embargo, estos orquestadores no est\'an dise\~nados para gestionar autom\'aticamente cambios arquitect\'onicos sobre la configuraci\'on de servicios, necesarios bajo ciertas condiciones operativas.Este trabajo promueve la aplicaci\'on de la computaci\'on aut\'onoma (a trav\'es del uso de bucles de control) como estrategia para la reconfiguraci\'on din\'amica de arquitecturas de microservicios.Para ello, se introduce el concepto de servicio adaptive-ready, como un microservicio que ofrece un contrato de adaptaci\'on dise\~nado ser usado por los bucles de control.Para ejemplificar la propuesta se utiliza un caso de estudio real en el que se aplican estos principios para desarrollar el sistema inform\'atico de una f\'abrica de producci\'on industrial.Se han dise\~nado e implementado un conjunto de servicios `adaptive-ready' y se ha desplegado una arquitectura de microservicios reconfigurable sobre kubernetes.},
  langid = {spanish},
  file = {/home/adriano/Zotero/storage/9MMHD39C/Fons et al. - Servicios adaptive-ready para la reconﬁguraci´on d.pdf}
}

@inproceedings{footeBigBallMud1997,
  title = {Big {{Ball}} of {{Mud}}},
  booktitle = {Fourth {{Conference}} on {{Patterns Languages}} of {{Programs}}},
  author = {Foote, Brian and Yoder, Joseph},
  year = {1997},
  month = sep,
  address = {{Monticello}},
  url = {http://laputan.org/mud/},
  urldate = {2022-01-23},
  file = {/home/adriano/Zotero/storage/ULEPICQE/mud.html}
}

@misc{fowlerRichardsonMaturityModel2010,
  title = {Richardson {{Maturity Model}}},
  author = {Fowler, Martin},
  year = {2010},
  month = mar,
  journal = {martinfowler.com},
  url = {https://martinfowler.com/articles/richardsonMaturityModel.html},
  urldate = {2022-01-02},
  abstract = {Leonard Richardson's model for understanding a RESTful architecture as steps in a maturity model. Levels are (1) resources, (2) HTTP verbs and return codes, and (3) hypertext controls.},
  langid = {english},
  file = {/home/adriano/Zotero/storage/86W975MP/richardsonMaturityModel.html}
}

@article{gannonCloudNativeApplications2017,
  title = {Cloud-{{Native Applications}}},
  author = {Gannon, Dennis and Barga, Roger and Sundaresan, Neel},
  year = {2017},
  month = sep,
  journal = {IEEE Cloud Computing},
  volume = {4},
  number = {5},
  pages = {16--21},
  issn = {2325-6095},
  doi = {10.1109/MCC.2017.4250939},
  abstract = {Cloud-native is a term that is invoked often but seldom defined beyond saying ``we built it in the cloud'' as opposed to ``on-prem''. However, there is now an emerging consensus around key ideas and informal applications design patterns that have been adopted and used in many successful cloud applications. In this introduction, we will describe these cloud-native concepts and illustrate them with examples. We will also look at the technical trends that may give us an idea about the future of cloud applications. We begin by discussing the basic properties that many cloud-native apps have in common. Once we have characterized them, we can then describe how these properties emerge from the technical design patterns.},
  keywords = {cloud computing,cloud-native,distributed computing,microservices,serverless},
  file = {/home/adriano/Zotero/storage/P4BBQ68I/Gannon et al. - 2017 - Cloud-Native Applications.pdf;/home/adriano/Zotero/storage/X25X9Y46/8125550.html}
}

@inproceedings{garlanIncreasingSystemDependability2003,
  title = {Increasing {{System Dependability}} through {{Architecture-Based Self-Repair}}},
  booktitle = {Architecting {{Dependable Systems}}},
  author = {Garlan, David and Cheng, Shang-Wen and Schmerl, Bradley},
  editor = {{de Lemos}, Rog{\'e}rio and Gacek, Cristina and Romanovsky, Alexander},
  year = {2003},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {61--89},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-45177-3_3},
  abstract = {One increasingly important technique for improving system dependability is to provide mechanisms for a system to adapt at run time in order to accommodate varying resources, system errors, and changing requirements. For such ``self-repairing'' systems one of the hard problems is determining when a change is needed, and knowing what kind of adaptation is required. In this paper we describe a partial solution in which stylized architectural design models are maintained at run time as a vehicle for automatically monitoring system behavior, for detecting when that behavior falls outside of acceptable ranges, and for deciding on a high-level repair strategy. The main innovative feature of the approach is the ability to specialize a generic run time adaptation framework to support particular architectural styles and properties of interest. Specifically, a formal description of an architectural style defines for a family of related systems the conditions under which adaptation should be considered, provides an analytic basis for detecting anomalies, and serves as a basis for developing sound repair strategies.},
  isbn = {978-3-540-45177-8},
  langid = {english},
  keywords = {Architectural Model,Architectural Style,Constraint Violation,Server Group,Software Architecture},
  file = {/home/adriano/Zotero/storage/G88LPWIC/2003_Book_ArchitectingDependableSystems.pdf}
}

@inbook{garlanINTRODUCTIONSOFTWAREARCHITECTURE1993,
  title = {{{AN INTRODUCTION TO SOFTWARE ARCHITECTURE}}},
  booktitle = {Series on {{Software Engineering}} and {{Knowledge Engineering}}},
  author = {Garlan, David and Shaw, Mary},
  year = {1993},
  month = dec,
  volume = {2},
  pages = {1--39},
  publisher = {{WORLD SCIENTIFIC}},
  doi = {10.1142/9789812798039_0001},
  abstract = {This work was funded in part by the Department of Defense Advanced Research Project Agency under grant MDA972-92-J-1002, by National Science Foundation Grants CCR-9109469 and CCR-9112880, and by a grant from Siemens Corporate Research. It was also funded in part by the Carnegie Mellon University School of Computer Science and Software Engineering Institute (which is sponsored by the U.S. Department of Defense). The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the U.S. Government, the Department of Defense, the National Science Foundation, Siemens Corporation, or Carnegie Mellon University.},
  collaborator = {Ambriola, Vincenzo and Tortora, Genoveffa},
  isbn = {978-981-02-1594-1 978-981-279-803-9},
  langid = {english},
  file = {/home/adriano/Zotero/storage/DQPDIJPY/Garlan and Shaw - 1993 - AN INTRODUCTION TO SOFTWARE ARCHITECTURE.pdf}
}

@inproceedings{gilDesigningHumanLoop2016a,
  title = {Designing the {{Human}} in the {{Loop}} of {{Self-Adaptive Systems}}},
  booktitle = {Ubiquitous {{Computing}} and {{Ambient Intelligence}}},
  author = {Gil, Miriam and Pelechano, Vicente and Fons, Joan and Albert, Manoli},
  editor = {Garc{\'i}a, Carmelo R. and {Caballero-Gil}, Pino and Burmester, Mike and {Quesada-Arencibia}, Alexis},
  year = {2016},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {437--449},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-48746-5_45},
  abstract = {Self-adaptation is a key requirement in emerging software systems that must become capable of continuously adapting its behavior at run-time to their context (new environmental conditions, resource variability, unpredictable situations, changing user needs, etc.) without human intervention. However, experience in autonomous systems shows that people cannot be excluded entirely of the adaptation loop. For example, in the case of autonomous cars, they still need humans to drive in certain situations (e.g., complex driving situations, emergencies, etc.). This work defines the key factors to design the human participation in the control loops by introducing a framework to design human participations. Our framework considers human attention as a critical factor for user participation. Also, it pays attention to the dynamism between different types of human participation depending on the different system limitations (e.g., uncertainties in sensing, conflicts in goals, etc.) and the current user situation (e.g., user attention, environmental situation, etc.). We illustrate our approach by applying it to manage some actual autonomous cars situations that require human intervention.},
  isbn = {978-3-319-48746-5},
  langid = {english},
  keywords = {Human in the loop,Human-computer interaction,Self-adaptation,User attention},
  file = {/home/adriano/Zotero/storage/I6SMVD3N/Gil et al. - 2016 - Designing the Human in the Loop of Self-Adaptive S.pdf}
}

@misc{gotoconferencesManyMeaningsEventDriven2017,
  title = {The {{Many Meanings}} of {{Event-Driven Architecture}} \textbullet{} {{Martin Fowler}} \textbullet{} {{GOTO}} 2017},
  author = {{GOTO Conferences}},
  year = {2017},
  month = may,
  url = {https://www.youtube.com/watch?v=STKCRSUsyP0},
  urldate = {2021-10-10},
  abstract = {This presentation was recorded at GOTO Chicago 2017. \#GOTOcon \#GOTOchgo http://gotochgo.com Martin Fowler - Author, Speaker, Consultant and General Loud-mouth on Software Development ABSTRACT During my career, I've often people heard people describe their systems as "event-driven". But when looking deeper that phrase seems to lead to some very different architectural assumptions. On a recent workshop we identified four different patterns [...] TIMECODES 0:00 What people mean by EDA 00:51 How he came to write down common patterns of EDA and hold this talk 02:45 4 patterns detected 03:20 Pattern 1: Event Notification 08:33 Events vs Commands 11:30 Pro: Decoupling 13:50 Contra: inability to understand what is going on by stepping through the code 14:53 Pattern 2: Event-carried State Transfer 20:51 Pattern 3: Event Sourcing 32:11 Can be a very nice system development-wise 33:43 Downside of Event Sourcing 38:46 Which events to record in the event store? 43:31 Pattern 4: CQRS 47:39 Conclusion : How to use the knowledge about those 4 patterns Read the full abstract here: https://gotochgo.com/2017/sessions/47 RECOMMENDED BOOKS Martin Fowler \& Pramod Sadalage \textbullet{} NoSQL Distilled \textbullet{} https://amzn.to/3ChIpu7 Martin Fowler \textbullet{} Patterns of Enterprise Application Architecture \textbullet{} https://amzn.to/3lp4sIq Martin Fowler \textbullet{} Domain-Specific Languages \textbullet{} https://amzn.to/3nzOIFk Martin Fowler \textbullet{} UML Distilled \textbullet{} https://amzn.to/3kahjyA Martin Fowler \textbullet{} Analysis Patterns \textbullet{} https://amzn.to/3Emabar https://twitter.com/gotochgo https://www.facebook.com/GOTOConference \#EventDrivenArchitecture \#EventDriven \#SoftwareArchitecture Looking for a unique learning experience? Attend the next GOTO Conference near you! Get your ticket at http://gotocon.com SUBSCRIBE TO OUR CHANNEL - new videos posted almost daily. https://www.youtube.com/user/GotoConf...}
}

@misc{hintjensReliableRequestReplyPatterns,
  title = {4. {{Reliable Request-Reply Patterns}}},
  author = {Hintjens},
  journal = {ZeroMQ Documentation},
  url = {https://zguide.zeromq.org/docs/chapter4/},
  urldate = {2022-01-15},
  abstract = {Chapter 4 - Reliable Request-Reply Patterns \#   Chapter 3 - Advanced Request-Reply Patterns covered advanced uses of ZeroMQ's request-reply pattern with working examples. This chapter looks at the general question of reliability and builds a set of reliable messaging patterns on top of ZeroMQ's core request-reply pattern. In this chapter, we focus heavily on user-space request-reply patterns, reusable models that help you design your own ZeroMQ architectures:  The Lazy Pirate pattern: reliable request-reply from the client side The Simple Pirate pattern: reliable request-reply using load balancing The Paranoid Pirate pattern: reliable request-reply with heartbeating The Majordomo pattern: service-oriented reliable queuing The Titanic pattern: disk-based/disconnected reliable queuing The Binary Star pattern: primary-backup server failover The Freelance pattern: brokerless reliable request-reply  What is ``Reliability''?},
  langid = {english},
  file = {/home/adriano/Zotero/storage/YRGMXKTR/chapter4.html}
}

@techreport{ibmcorporationArchitecturalBlueprintAutonomic2006,
  title = {An {{Architectural Blueprint}} for {{Autonomic Computing}}},
  author = {IBM Corporation},
  year = {2006},
  institution = {{IBM}},
  url = {https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.150.1011&rep=rep1&type=pdf},
  urldate = {2021-12-11},
  langid = {english},
  file = {/home/adriano/Zotero/storage/P5C8NX9R/AC Blueprint White Paper V7.pdf;/home/adriano/Zotero/storage/RHQKTYDF/download.pdf}
}

@misc{ibmWhatAreMessage2020,
  title = {What Are {{Message Brokers}}?},
  shorttitle = {Message {{Brokers}}},
  author = {IBM},
  year = {2020},
  month = jan,
  journal = {IBM Cloud Learn Hub},
  url = {https://www.ibm.com/cloud/learn/message-brokers},
  urldate = {2022-08-11},
  abstract = {A message broker enables applications, systems, and services to communicate and exchange information, by translating messages in different messaging protocols.},
  langid = {american},
  file = {/home/adriano/Zotero/storage/77PSFMMM/message-brokers.html}
}

@techreport{ieeeStandard420102011Systems2011,
  title = {Standard 42010-2011 - {{Systems}} and Software Engineering -- {{Architecture}} Description},
  author = {IEEE and ISO and IEC},
  year = {2011},
  url = {https://standards.ieee.org/standard/42010-2011.html},
  urldate = {2021-11-28},
  file = {/home/adriano/Zotero/storage/M53A8J8T/iso-iec-ieee-42010-2011.pdf;/home/adriano/Zotero/storage/VWNYMKXH/42010-2011.html}
}

@incollection{indrasiriCaseMicroservices2018,
  title = {The {{Case}} for {{Microservices}}},
  booktitle = {Microservices for the {{Enterprise}}: {{Designing}}, {{Developing}}, and {{Deploying}}},
  author = {Indrasiri, Kasun and Siriwardena, Prabath},
  editor = {Indrasiri, Kasun and Siriwardena, Prabath},
  year = {2018},
  pages = {1--18},
  publisher = {{Apress}},
  address = {{Berkeley, CA}},
  doi = {10.1007/978-1-4842-3858-5_1},
  abstract = {Enterprise software architecture always evolves with new architectural styles. These are paradigm shifts in the technology, coupled with the desire to find better ways to build software application in a fast but reliable way.},
  isbn = {978-1-4842-3858-5},
  langid = {english},
  keywords = {Enterprise Software Architecture,Inter-service Communication,Microservice Architecture,Monolithic Applications,Smart Endpoints},
  file = {/home/adriano/Zotero/storage/F4UYZ3KM/Indrasiri and Siriwardena - 2018 - The Case for Microservices.pdf}
}

@misc{jausovecFallaciesDistributedSystems2020,
  type = {Oracle {{Developers Blog}}},
  title = {Fallacies of Distributed Systems},
  shorttitle = {Oracle {{Developers Blog}}},
  author = {Jausovec, Peter},
  year = {2020},
  month = nov,
  journal = {Oracle Developers Blog},
  url = {https://blogs.oracle.com/developers/post/fallacies-of-distributed-systems},
  urldate = {2022-01-02},
  langid = {english},
  file = {/home/adriano/Zotero/storage/3V7RC95S/fallacies-of-distributed-systems.html}
}

@misc{johanssonPartRabbitMQBest2019,
  title = {Part 1: {{RabbitMQ Best Practices}}},
  shorttitle = {{{RabbitMQ Best Practices}}},
  author = {Johansson, Lovisa},
  year = {2019},
  month = sep,
  journal = {Cloud AMQP},
  url = {https://www.cloudamqp.com/blog/part1-rabbitmq-best-practice.html},
  urldate = {2022-08-18},
  abstract = {We have been working with RabbitMQ a long time, and we have probably seen way more configuration mistakes than anybody else. We know how to configure for optimal performance and how to get the most stable cluster. We will in this series share our knowledge!},
  langid = {english},
  file = {/home/adriano/Zotero/storage/2KREK587/part1-rabbitmq-best-practice.html}
}

@misc{JWTUMOIMAct,
  title = {{{JWTUMOIM}}: {{Act}} 3},
  url = {https://www.crummy.com/writing/speaking/2008-QCon/act3.html},
  urldate = {2022-01-02},
  file = {/home/adriano/Zotero/storage/VFFKCY8R/act3.html}
}

@article{kephartVisionAutonomicComputing2003,
  title = {The Vision of Autonomic Computing},
  author = {Kephart, J.O. and Chess, D.M.},
  year = {2003},
  month = jan,
  journal = {Computer},
  volume = {36},
  number = {1},
  pages = {41--50},
  issn = {1558-0814},
  doi = {10.1109/MC.2003.1160055},
  abstract = {A 2001 IBM manifesto observed that a looming software complexity crisis -caused by applications and environments that number into the tens of millions of lines of code - threatened to halt progress in computing. The manifesto noted the almost impossible difficulty of managing current and planned computing systems, which require integrating several heterogeneous environments into corporate-wide computing systems that extend into the Internet. Autonomic computing, perhaps the most attractive approach to solving this problem, creates systems that can manage themselves when given high-level objectives from administrators. Systems manage themselves according to an administrator's goals. New components integrate as effortlessly as a new cell establishes itself in the human body. These ideas are not science fiction, but elements of the grand challenge to create self-managing computing systems.},
  keywords = {Biology computing,Computer industry,Computer vision,Crisis management,Environmental management,Humans,Internet,LAN interconnection,Pervasive computing,Technological innovation},
  file = {/home/adriano/Zotero/storage/8XGCGFWZ/1160055.html}
}

@book{korabUnderstandingMessageBrokers2017,
  title = {Understanding {{Message Brokers}}},
  author = {Korab, Jakub},
  year = {2017},
  month = jun,
  publisher = {{O'Reilly Media}},
  url = {https://learning.oreilly.com/library/view/understanding-message-brokers/9781492049296/},
  urldate = {2022-01-15},
  abstract = {Messaging is one of the more poorly understood areas of IT; most developers and architects have only a passing familiarity with how broker-based messaging technologies work. This practical report...},
  isbn = {978-1-4920-4929-6},
  langid = {english},
  file = {/home/adriano/Zotero/storage/R5WVN5TZ/9781492049296.html}
}

@misc{lewisMicroservices14,
  title = {Microservices},
  author = {Lewis, James and Fowler, Martin},
  year = {14},
  month = mar,
  journal = {martinfowler.com},
  url = {https://martinfowler.com/articles/microservices.html},
  urldate = {2022-08-09},
  abstract = {Defining the microservices architectural style by describing their nine common characteristics},
  file = {/home/adriano/Zotero/storage/M5AB2SB8/microservices.html}
}

@article{lopezBridgingGapSoftware2012,
  title = {Bridging the Gap between Software Architecture Rationale Formalisms and Actual Architecture Documents: {{An}} Ontology-Driven Approach},
  shorttitle = {Bridging the Gap between Software Architecture Rationale Formalisms and Actual Architecture Documents},
  author = {L{\'o}pez, Claudia and Codocedo, V{\'i}ctor and Astudillo, Hern{\'a}n and Cysneiros, Luiz Marcio},
  year = {2012},
  month = jan,
  journal = {Science of Computer Programming},
  series = {System and {{Software Solution Oriented Architectures}}},
  volume = {77},
  number = {1},
  pages = {66--80},
  issn = {0167-6423},
  doi = {10.1016/j.scico.2010.06.009},
  abstract = {Documenting software architecture rationale is essential to reuse and evaluate architectures, and several modeling and documentation guidelines have been proposed in the literature. However, in practice creating and updating these documents rarely is a primary activity in most software projects, and rationale remains hidden in casual and semi-structured records, such as e-mails, meeting notes, wikis, and specialized documents. This paper describes the TREx (Toeska Rationale Extraction) approach to recover, represent and explore rationale information from text documents, combining: (1) pattern-based information extraction to recover rationale; (2) ontology-based representation of rationale and architectural concepts; and (3) facet-based interactive exploration of rationale. Initial results from TREx's application suggest that some kinds of architecture rationale can be semi-automatically extracted from a project's unstructured text documents, namely decisions, alternatives and requirements. The approach and some tools are illustrated with a case study of rationale recovery for a financial securities settlement system.},
  langid = {english},
  keywords = {Design rationale,Ontology,Rationale recovering,Semantic indexing,Software architecture},
  file = {/home/adriano/Zotero/storage/A33SMGGQ/López et al. - 2012 - Bridging the gap between software architecture rat.pdf}
}

@phdthesis{manezIngenieriaDisenoSoluciones2021a,
  title = {{Ingenier\'ia y Dise\~no de soluciones de microservicios auto-adaptativos. Una aplicaci\'on pr\'actica de los bucles de control sobre Kubernetes}},
  author = {M{\'a}{\~n}ez, Blanco and Miguel, Francisco},
  year = {2021},
  month = jul,
  url = {https://riunet.upv.es/handle/10251/170168},
  urldate = {2022-07-15},
  abstract = {[ES]  Los microservicios son un enfoque arquitect\'onico y organizativo para el desarrollo de  software donde dicho software est\'a compuesto por peque\~nos servicios independientes  que se comunican a trav\'es de APIs bien definidas. Estas arquitecturas suelen ser  desplegadas y gestionadas en plataformas que 'orquestan' estas soluciones a trav\'es de la  infraestructura que proporcionan. En este sentido, Kubernetes se postula como una de  las apuestas m\'as s\'olidas en estos momentos como orquestador de microservicios .  En este trabajo se pretende dar un paso adelante y extender las capacidades de  computaci\'on aut\'onoma, no s\'olo a la infraestructura computacional \textendash{} Kubernetes \textendash{} , sino  tambi\'en a nivel de la propia arquitectura de microservicios. Para ello, se utilizar\'an  t\'ecnicas provenientes de los bucles de control \textendash{} en concreto, los bucles de control  MAPE-K propuestos por IBM \textendash{} que nos permitir\'a realizar esta ingenier\'ia y dise\~no de  este tipo de arquitecturas, en el que el dise\~no arquitect\'onico de las soluciones basadas  en microservicios podr\'a adaptarse \textendash{} en tiempo de ejecuci\'on \textendash{} a las circunstancias, de  manera aut\'onoma, por la propia soluci\'on.  Se realizar\'a un trabajo pr\'actico en el que aplicando las t\'ecnicas de computaci\'on  aut\'onoma desarrolladas en el grupo Tatami con el enfoque FADA (Framework de autoADAptaci\'on basado en los bucles de control MAPE-K), se dise\~nar\'a una soluci\'on autoadaptativa que pueda aplicarse sobre soluciones de microservicios orquestadas con  Kubernetes. Se propondr\'a una estrategia que permita, no s\'olo configurar en un  momento determinado una soluci\'on de microservicios auto-adaptativos sobre  Kubernetes, sino que tambi\'en definir\'a operaciones de auto-gesti\'on de la propia  plataforma cuando la soluci\'on de microservicios se reconfigure de manera aut\'onoma.  Para ejemplificar y validar el trabajo, se desarrollar\'a un ejemplo protot\'ipico real, en el  que se demostrar\'a la aplicaci\'on de la propuesta aplicando FADA sobre una soluci\'on de  microservicios operando en cl\'usters computacionales orquestados con Kubernetes y  monitorizados con componentes software propios.},
  copyright = {Reconocimiento - No comercial (by-nc)},
  langid = {spanish},
  school = {Universitat Polit\`ecnica de Val\`encia},
  annotation = {Accepted: 2021-07-26T10:26:50Z},
  file = {/home/adriano/Zotero/storage/LLHXZCF2/Máñez and Miguel - 2021 - Ingeniería y Diseño de soluciones de microservicio.pdf;/home/adriano/Zotero/storage/TL2GRW4X/170168.html}
}

@incollection{martinChapter15What2018,
  title = {Chapter 15: {{What}} Is an {{Architecture}}?},
  booktitle = {Clean Architecture: A Craftsman's Guide to Software Structure and Design},
  author = {Martin, Robert C.},
  year = {2018},
  series = {Robert {{C}}. {{Martin}} Series},
  publisher = {{Prentice Hall}},
  address = {{London, England}},
  abstract = {Building upon the success of best-sellers The Clean Coder and Clean Code, legendary software craftsman Robert C. "Uncle Bob" Martin shows how to bring greater professionalism and discipline to application architecture and design. As with his other books, Martin's Clean Architecture doesn't merely present multiple choices and options, and say "use your best judgment": it tells you what choices to make, and why those choices are critical to your success. Martin offers direct, no-nonsense answers to key architecture and design questions like: What are the best high level structures for different kinds of applications, including web, database, thick-client, console, and embedded apps? What are the core principles of software architecture? What is the role of the architect, and what is he/she really trying to achieve? What are the core principles of software design? How do designs and architectures go wrong, and what can you do about it? What are the disciplines and practices of professional architects and designers? Clean Architecture is essential reading for every software architect, systems analyst, system designer, and software manager -- and for any programmer who aspires to these roles or is impacted by their work},
  isbn = {978-0-13-449416-6},
  lccn = {QA76.76.D47 M36515 2018},
  keywords = {Computer programming,Computer software,COMPUTERS / Computer Architecture,Development,History,Software architecture},
  annotation = {OCLC: on1004983973}
}

@incollection{martinChapter22Clean2018a,
  title = {Chapter 22: {{The Clean Architecture}}},
  booktitle = {Clean Architecture: A Craftsman's Guide to Software Structure and Design},
  author = {Martin, Robert C.},
  year = {2018},
  series = {Robert {{C}}. {{Martin}} Series},
  publisher = {{Prentice Hall}},
  address = {{London, England}},
  abstract = {Building upon the success of best-sellers The Clean Coder and Clean Code, legendary software craftsman Robert C. "Uncle Bob" Martin shows how to bring greater professionalism and discipline to application architecture and design. As with his other books, Martin's Clean Architecture doesn't merely present multiple choices and options, and say "use your best judgment": it tells you what choices to make, and why those choices are critical to your success. Martin offers direct, no-nonsense answers to key architecture and design questions like: What are the best high level structures for different kinds of applications, including web, database, thick-client, console, and embedded apps? What are the core principles of software architecture? What is the role of the architect, and what is he/she really trying to achieve? What are the core principles of software design? How do designs and architectures go wrong, and what can you do about it? What are the disciplines and practices of professional architects and designers? Clean Architecture is essential reading for every software architect, systems analyst, system designer, and software manager -- and for any programmer who aspires to these roles or is impacted by their work},
  isbn = {978-0-13-449416-6},
  lccn = {QA76.76.D47 M36515 2018},
  keywords = {Computer programming,Computer software,COMPUTERS / Computer Architecture,Development,History,Software architecture},
  annotation = {OCLC: on1004983973}
}

@article{medvidovicUsingObjectorientedTyping1996,
  title = {Using Object-Oriented Typing to Support Architectural Design in the {{C2}} Style},
  author = {Medvidovic, Nenad and Oreizy, Peyman and Robbins, Jason E. and Taylor, Richard N.},
  year = {1996},
  month = oct,
  journal = {ACM SIGSOFT Software Engineering Notes},
  volume = {21},
  number = {6},
  pages = {24--32},
  issn = {0163-5948},
  doi = {10.1145/250707.239106},
  abstract = {Software architectures enable large-scale software development. Component reuse and substitutability, two key aspects of large-scale development, must be planned for during software design. Object-oriented (OO) type theory supports reuse by structuring inter-component relationships and verifying those relationships through type checking in an architecture definition language (ADL). In this paper, we identify the issues and discuss the ramifications of applying OO type theory to the C2 architectural style. This work stems from a series of experiments that were conducted to investigate component reuse and substitutability in C2. We also discuss the limits of applicability of OO typing to C2 and how we addressed them in the C2 ADL.},
  file = {/home/adriano/Zotero/storage/A7I7XNJ7/Medvidovic et al. - 1996 - Using object-oriented typing to support architectu.pdf}
}

@incollection{megargelMigratingMonolithsCloudBased2020a,
  title = {Migrating from {{Monoliths}} to {{Cloud-Based Microservices}}: {{A Banking Industry Example}}},
  shorttitle = {Migrating from {{Monoliths}} to {{Cloud-Based Microservices}}},
  booktitle = {Software {{Engineering}} in the {{Era}} of {{Cloud Computing}}},
  author = {Megargel, Alan and Shankararaman, Venky and Walker, David K.},
  editor = {Ramachandran, Muthu and Mahmood, Zaigham},
  year = {2020},
  series = {Computer {{Communications}} and {{Networks}}},
  pages = {85--108},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-33624-0_4},
  abstract = {As organizations are beginning to place cloud computing at the heart of their digital transformation strategy, it is important that they adopt appropriate architectures and development methodologies to leverage the full benefits of the cloud paradigm. A mere ``lift and move'' approach, where traditional monolith applications are moved to the cloud will not support the demands of digital services. While monolithic applications may be easier to develop and control, they are inflexible to change to become more suitable for cloud environments. Microservices architectureMicroservices architecture, which adopts some of the concepts and principles of service-oriented architecture, provides a number of benefits, when developing an enterprise application, over a monolithic architectureMonolithic architecture. MicroservicesMicroservices architecture offers agility, faster development and deployment cycles, scalability of selected functionality and the ability to develop solutions using a mixture of technologies. Microservices architectureMicroservices architecture aims to decompose a monolithic application into a set of independent services which communicate with each other through open APIs or highly scalable messaging. In short, microservices architectureMicroservices architecture is more suited for building agile and scalable cloud-basedCloud-based solutions. This chapter provides a practice-based view and comparison between the monolithic and microservicesMicroservices styles of application architecture in the context of cloud computing vision and proposes a methodology for transitioning from monoliths to cloud-basedCloud-based microservicesMicroservices.},
  isbn = {978-3-030-33624-0},
  langid = {english},
  keywords = {Cloud-based,Microservice identification,Microservices,Microservices architecture,Migration,Monolithic architecture},
  file = {/home/adriano/Zotero/storage/3G2UUD2C/Megargel et al. - 2020 - Migrating from Monoliths to Cloud-Based Microservi.pdf}
}

@inproceedings{mehtaTaxonomySoftwareConnectors2000,
  title = {Towards a Taxonomy of Software Connectors},
  booktitle = {Proceedings of the 22nd International Conference on {{Software}} Engineering},
  author = {Mehta, Nikunj R. and Medvidovic, Nenad and Phadke, Sandeep},
  year = {2000},
  month = jun,
  series = {{{ICSE}} '00},
  pages = {178--187},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/337180.337201},
  abstract = {Software systems of today are frequently composed from prefabricated, heterogeneous components that provide complex functionality and engage in complex interactions. Existing research on component-based development has mostly focused on component structure, interfaces, and functionality. Recently, software architecture has emerged as an area that also places significant importance on component interactions, embodied in the notion of software connectors. However, the current level of understanding and support for connectors has been insufficient. This has resulted in their inconsistent treatment and a notable lack of understanding of what the fundamental building blocks of software interaction are and how they can be composed into more complex interactions. This paper attempts to address this problem. It presents a comprehensive classification framework and taxonomy of software connectors. The taxonomy is obtained through an extensive analysis of existing component interactions. The taxonomy is used both to understand existing software connectors and to suggest new, unprecedented connectors. We demonstrate the use of the taxonomy on the architecture of a large, existing system.},
  isbn = {978-1-58113-206-9},
  keywords = {classification,software architecture,software connector,taxonomy},
  file = {/home/adriano/Zotero/storage/MNVGKGMD/Mehta and Phadke - Towards a Taxonomy of Software Connectors.pdf}
}

@inproceedings{mendoncaGeneralityVsReusability2018,
  title = {Generality vs. Reusability in Architecture-Based Self-Adaptation: The Case for Self-Adaptive Microservices},
  shorttitle = {Generality vs. Reusability in Architecture-Based Self-Adaptation},
  booktitle = {Proceedings of the 12th {{European Conference}} on {{Software Architecture}}: {{Companion Proceedings}}},
  author = {Mendon{\c c}a, Nabor C. and Garlan, David and Schmerl, Bradley and C{\'a}mara, Javier},
  year = {2018},
  month = sep,
  pages = {1--6},
  publisher = {{ACM}},
  address = {{Madrid Spain}},
  doi = {10.1145/3241403.3241423},
  abstract = {Why is it so difficult to build self-adaptive systems by reusing existing self-adaptation services and frameworks? In this paper, we argue that one possible explanation is that there is a fundamental mismatch between the adaptation needs of modern software systems, and the architectural models and adaptation mechanisms supported by current self-adaptation solutions. We identify and discuss the main reasons leading to this problem by looking into a number of representative self-adaptation solutions that have been proposed in recent years, including open source frameworks and cloud-based services, from two perspectives: generality, i.e., their ability to support a variety of architectural models and adaptation mechanisms, and reusability, i.e., their ability to be reused without requiring substantial effort from software developers. We then make the case that recent industry progress toward microservices and their enabling technologies can open the way to the development of more general and reusable self-adaptation solutions.},
  isbn = {978-1-4503-6483-6},
  langid = {english},
  file = {/home/adriano/Zotero/storage/VG3JCR9I/Mendonça et al. - 2018 - Generality vs. reusability in architecture-based s.pdf}
}

@article{mishraLoadBalancingCloud2020,
  title = {Load Balancing in Cloud Computing: {{A}} Big Picture},
  shorttitle = {Load Balancing in Cloud Computing},
  author = {Mishra, Sambit Kumar and Sahoo, Bibhudatta and Parida, Priti Paramita},
  year = {2020},
  month = feb,
  journal = {Journal of King Saud University - Computer and Information Sciences},
  volume = {32},
  number = {2},
  pages = {149--158},
  issn = {1319-1578},
  doi = {10.1016/j.jksuci.2018.01.003},
  abstract = {Scheduling or the allocation of user requests (tasks) in the cloud environment is an NP-hard optimization problem. According to the cloud infrastructure and the user requests, the cloud system is assigned with some load (that may be underloaded or overloaded or load is balanced). Situations like underloaded and overloaded cause different system failure concerning the power consumption, execution time, machine failure, etc. Therefore, load balancing is required to overcome all mentioned problems. This load balancing of tasks (those are may be dependent or independent) on virtual machines (VMs) is a significant aspect of task scheduling in clouds. There are various types of loads in the cloud network such as memory load, Computation (CPU) load, network load, etc. Load balancing is the mechanism of detecting overloaded and underloaded nodes and then balance the load among them. Researchers proposed various load balancing approaches in cloud computing to optimize different performance parameters. We have presented a taxonomy for the load balancing algorithms in the cloud. A brief explanation of considered performance parameters in the literature and their effects is presented in this paper. To analyze the performance of heuristic-based algorithms, the simulation is carried out in CloudSim simulator and the results are presented in detail.},
  langid = {english},
  keywords = {Cloud computing,Energy consumption,Load balancing,Makespan,Task allocation,Virtualization,VM},
  file = {/home/adriano/Zotero/storage/N94BAEKY/Mishra et al. - 2020 - Load balancing in cloud computing A big picture.pdf;/home/adriano/Zotero/storage/9387GR9E/S1319157817303361.html}
}

@article{nadhomSurveyPublicData2018,
  title = {Survey of Public Data Sources on the {{Internet}} Usage and Other {{Internet}} Statistics},
  author = {Nadhom, Murooj and Loskot, Pavel},
  year = {2018},
  month = jun,
  journal = {Data in Brief},
  volume = {18},
  pages = {1914--1929},
  issn = {2352-3409},
  doi = {10.1016/j.dib.2018.04.107},
  abstract = {The Internet research is mainly driven by data. Obtaining such data by planning and launching measurement campaigns is rather time consuming and costly. Much more efficient, and in many cases, sufficient data acquisition strategy is to exploit the existing datasets available in public databases, repositories, and documents. Hence, the public data sources related to the Internet usage and other Internet statistics are systematically surveyed and categorized to make the search for the Internet data much easier and faster. Extensive online searches and exploring websites of the key organizations were used to identify the data sources. Each data source was then carefully explored to describe its characteristics and contents. The data are usually aggregated over certain time periods and regions, and often indexed by age, gender, application, website, activity and other attributes. Some data sources also support various data visualization options, and offer data export in multiple formats.},
  langid = {english},
  file = {/home/adriano/Zotero/storage/4WE67LJI/Nadhom and Loskot - 2018 - Survey of public data sources on the Internet usag.pdf}
}

@misc{nallyRESTVsRPC2018,
  type = {Blog},
  title = {{{REST}} vs. {{RPC}}: What Problems Are You Trying to Solve with Your {{APIs}}?},
  shorttitle = {{{REST}} vs. {{RPC}}},
  author = {Nally, Martin},
  year = {2018},
  month = oct,
  journal = {Google Cloud Blog},
  url = {https://cloud.google.com/blog/products/application-development/rest-vs-rpc-what-problems-are-you-trying-to-solve-with-your-apis/},
  urldate = {2022-01-08},
  abstract = {It's important to think about the fundamental problem you are trying to solve with your API because the style of API you create and the technologies you choose depend on your answer.},
  langid = {english},
  file = {/home/adriano/Zotero/storage/N36M8GVI/rest-vs-rpc-what-problems-are-you-trying-to-solve-with-your-apis.html}
}

@misc{NETCoreApps,
  title = {.{{NET Core Apps}}: {{How}} to {{Debug}} and {{Diagnose}} | {{DotNet}} 2021 - {{YouTube}}},
  url = {https://www.youtube.com/watch?v=Hw__DetUlOY},
  urldate = {2021-12-12}
}

@book{newmanBuildingMicroservicesDesigning2021,
  title = {Building {{Microservices}}: {{Designing Fine-Grained Systems}}},
  author = {Newman, Sam},
  year = {2021},
  month = aug,
  publisher = {{O'Reilly Media, Inc.}},
  url = {https://learning.oreilly.com/library/view/building-microservices-2nd/9781492034018/},
  urldate = {2021-12-31},
  abstract = {As organizations shift from monolithic applications to smaller, self-contained microservices, distributed systems have become more fine-grained. But developing these new systems brings its own...},
  isbn = {978-1-4920-3401-8},
  langid = {english},
  file = {/home/adriano/Zotero/storage/3LT2REPK/9781492034018.html}
}

@misc{openapi_initiativeOpenAPISpecificationV3,
  title = {{{OpenAPI Specification}} v3.1.0},
  author = {OpenAPI\_Initiative},
  url = {https://spec.openapis.org/oas/latest.html},
  urldate = {2022-01-16},
  file = {/home/adriano/Zotero/storage/3TAYP5L3/latest.html}
}

@misc{OpenAPISpecificationV3,
  title = {{{OpenAPI Specification}} v3.1.0 | {{Introduction}}, {{Definitions}}, \& {{More}}},
  url = {https://spec.openapis.org/oas/latest.html},
  urldate = {2021-11-14},
  file = {/home/adriano/Zotero/storage/ZX5393IT/latest.html}
}

@misc{opentelemetryOpenTelemetryDocumentation2022,
  title = {{{OpenTelemetry Documentation}}},
  author = {OpenTelemetry},
  year = {2022},
  journal = {OpenTelemetry},
  url = {https://opentelemetry.io/docs/},
  urldate = {2022-05-23},
  abstract = {The OpenTelemetry Project Site},
  langid = {english},
  file = {/home/adriano/Zotero/storage/3DSKZEXS/docs.html}
}

@incollection{parkerProblemDistributedTracing2020,
  title = {1. {{The Problem}} with {{Distributed Tracing}}},
  booktitle = {Distributed {{Tracing}} in {{Practice}}},
  author = {Parker, Austin and Spoonhower, Daniel and Mace, Jonathan and Sigelman, Ben and Isaacs, Rebecca},
  year = {2020},
  month = apr,
  publisher = {{O'Reilly Media, Inc.}},
  url = {https://learning.oreilly.com/library/view/distributed-tracing-in/9781492056621/},
  urldate = {2021-12-12},
  abstract = {Since most applications today are distributed in some fashion, monitoring their health and performance requires a new approach. Enter distributed tracing, a method of profiling and monitoring...},
  isbn = {978-1-4920-5662-1},
  langid = {english},
  file = {/home/adriano/Zotero/storage/F2BIY7RM/9781492056621.html}
}

@article{perryFoundationsStudySoftware1992,
  title = {Foundations for the {{Study}} of {{Software Architecture}}},
  author = {Perry, Dewayne and Wolf, Alexander},
  year = {1992},
  month = oct,
  journal = {ACM SIGSOFT Software Engineering Notes},
  volume = {17},
  doi = {10.1145/141874.141884},
  abstract = {The purpose of this paper is to build the foundation for software architecture. Wefirstdevelop an intuition for software architecture by appealing to several wellestablished architectural disciplines. On the basis of this intuition, we present a model of software architecture that consists of three components: elements, form, and rationale. Elements are either processing, data, or connecting elements. Form is defined in terms of the properties of, and the relationships among, the elements --- that is, the constraints on the elements. The rationale provides the underlying basis for the architecture in terms of the system constraints, which most often derive from the system requirements. We discuss the components of the model in the context of both architectures and architectural styles and present an extended example to illustrate some importantarchitecture and style considerations. We conclude by presenting some of the benefits of our approach to software architecture, summarizing our ...},
  file = {/home/adriano/Downloads/swa-sen.pdf}
}

@book{porcelloLearningGraphQLDeclarative2021,
  title = {Learning {{GraphQL}}: {{Declarative Data Fetching}} for {{Modern Web Apps}}},
  shorttitle = {Learning {{GraphQL}}},
  author = {Porcello, Eve and Banks, Alex},
  year = {2021},
  edition = {3rd},
  publisher = {{O'Reilly Media, Inc.}},
  abstract = {Why is GraphQL the most innovative technology for fetching data since Ajax? By providing a query language for your APIs and a runtime for fulfilling queries with your data, GraphQL presents a clear alternative to REST and ad hoc web service architectures. With this practical guide, Alex Banks and Eve Porcello deliver a clear learning path for frontend web developers, backend engineers, and project and product managers looking to get started with GraphQL. Youll explore graph theory, the graph data structure, and GraphQL types before learning hands-on how to build a schema for a photo-sharing application. This book also introduces you to Apollo Client, a popular framework you can use to connect GraphQL to your user interface. Explore graph theory and review popular graph examples in use today Learn how GraphQL applies database querying methods to the internetCreate a schema for a PhotoShare application that serves as a roadmap and a contract between the frontend and backend teams Use JavaScript to build a fully functioning GraphQL service and Apollo to implement a clientLearn how to prepare GraphQL APIs and clients for production},
  isbn = {978-1-4920-3071-3}
}

@misc{rabbitmqPublishSubscribeDocumentation,
  title = {Publish/{{Subscribe}} Documentation},
  author = {RabbitMQ},
  url = {https://www.rabbitmq.com/tutorials/tutorial-three-dotnet.html},
  urldate = {2022-01-15},
  file = {/home/adriano/Zotero/storage/3UFZNW36/tutorial-three-dotnet.html}
}

@misc{RESTAPIsMust,
  title = {{{REST APIs}} Must Be Hypertext-Driven \guillemotright{} {{Untangled}}},
  url = {https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven},
  urldate = {2022-01-02},
  file = {/home/adriano/Zotero/storage/XEFVK6WG/rest-apis-must-be-hypertext-driven.html}
}

@book{richardsonRESTfulWebServices2007,
  title = {{{RESTful Web Services}}},
  author = {Richardson, Leonard and Ruby, Sam},
  year = {2007},
  month = may,
  publisher = {{O'Reilly Media}},
  url = {https://learning.oreilly.com/library/view/restful-web-services/9780596529260/},
  urldate = {2022-01-02},
  abstract = {"Every developer working with the Web needs to read this book."-- David Heinemeier Hansson, creator of the Rails framework"RESTful Web Services finally provides a practical roadmap for...},
  isbn = {978-0-596-52926-0},
  langid = {english},
  file = {/home/adriano/Zotero/storage/9TN4DRQI/9780596529260.html}
}

@incollection{royChapterMessagePatterns2017,
  title = {Chapter 6. {{Message}} Patterns via Exchange Routing},
  booktitle = {{{RabbitMQ}} in {{Depth}}},
  author = {Roy, Gavin M.},
  year = {2017},
  month = sep,
  publisher = {{Manning Publications}},
  url = {https://learning.oreilly.com/library/view/rabbitmq-in-depth/9781617291005/},
  urldate = {2022-01-15},
  abstract = {About the Technology At the heart of most modern distributed applications is a queue that buffers, prioritizes, and routes message traffic. RabbitMQ is a high-performance message broker based on...},
  isbn = {978-1-61729-100-5},
  langid = {english},
  file = {/home/adriano/Zotero/storage/8J5HVYXR/9781617291005.html}
}

@article{savaglioAgentbasedInternetThings2020,
  title = {Agent-Based {{Internet}} of {{Things}}: {{State-of-the-art}} and Research Challenges},
  shorttitle = {Agent-Based {{Internet}} of {{Things}}},
  author = {Savaglio, Claudio and Ganzha, Maria and Paprzycki, Marcin and B{\u a}dic{\u a}, Costin and Ivanovi{\'c}, Mirjana and Fortino, Giancarlo},
  year = {2020},
  month = jan,
  journal = {Future Generation Computer Systems},
  volume = {102},
  pages = {1038--1053},
  issn = {0167-739X},
  doi = {10.1016/j.future.2019.09.016},
  abstract = {The disruptive potentials of the Internet of Things (IoT) entails multifaceted requirements and development issues (large scale deployments, heterogeneity, cyberphysicality, interoperability, distributed smartness, self-management, etc.). To adequately tackle them and to comprehensively support the development of the IoT ecosystem, the Agent-Based Computing (ABC) represents a proper and solid modeling, programming and simulation paradigm. Indeed, abstractions, design methods, technology and frameworks related to the ABC have been widely exploited, possibly jointly with other well-established/emerging computing paradigms, to actually develop advanced IoT ecosystem. This survey, an extension of our previous work, reports most relevant contemporary contributions in the field, aiming at assessing suitability of the ABC paradigm for the (current and future) IoT development.},
  langid = {english},
  keywords = {Internet of Things,IoT,Software agents},
  file = {/home/adriano/Zotero/storage/HVK2ZDQN/Savaglio et al. - 2020 - Agent-based Internet of Things State-of-the-art a.pdf;/home/adriano/Zotero/storage/DP8VL4HY/S0167739X19312282.html}
}

@misc{ServiceDesignPatterns,
  title = {Service {{Design Patterns}} - {{Web Service Infrastructures}} - {{Service Connector}}},
  url = {http://www.servicedesignpatterns.com/webserviceinfrastructures/serviceconnector},
  urldate = {2021-10-09},
  file = {/home/adriano/Zotero/storage/EISQQFJI/serviceconnector.html}
}

@misc{ServiciosAdaptivereadyParaa,
  title = {Servicios Adaptive-Ready Para La Reconfiguraci\'on Din\'amica de Arquitecturas de Microservicios |},
  url = {https://biblioteca.sistedes.es/articulo/servicios-adaptive-ready-para-la-reconfiguracion-dinamica-de-arquitecturas-de-microservicios/},
  urldate = {2021-12-11},
  file = {/home/adriano/Zotero/storage/XB6SVK87/servicios-adaptive-ready-para-la-reconfiguracion-dinamica-de-arquitecturas-de-microservicios.html}
}

@inproceedings{singjaiPatternsDerivingAPIs2021,
  title = {Patterns on {{Deriving APIs}} and Their {{Endpoints}} from {{Domain Models}}},
  booktitle = {26th {{European Conference}} on {{Pattern Languages}} of {{Programs}}},
  author = {Singjai, Apitchaka and Zdun, Uwe and Zimmermann, Olaf and Pautasso, Cesare},
  year = {2021},
  month = jul,
  series = {{{EuroPLoP}}'21},
  pages = {1--15},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3489449.3489976},
  abstract = {Domain-Driven Design (DDD) places the domain model at the center of all software development practices. Remote API design is crucial for developing distributed systems including, for example, microservice-based systems. While software practitioners realize APIs based on DDD models, clear guidance on how to derive APIs and API endpoints from domain model elements is still missing. Based on prior in-depth studies of practitioner sources on this and related topics, we have mined patterns to address these design problems. In particular, we present the domain model facade as api pattern which describes how to derive an API from a Domain Model. To explain further how derive API endpoints constituting the API from Domain Model elements, we present the aggregate roots as api endpoints, domain services as api endpoints, and domain processes as api endpoints patterns. In addition, we relate these patterns to the previously published patterns api description and api contract, both explaining how to describe APIs formally.},
  isbn = {978-1-4503-8997-6},
  keywords = {Design Patterns,Domain Driven Design,Microservice API},
  file = {/home/adriano/Zotero/storage/PIB4JBDH/Singjai et al. - 2021 - Patterns on Deriving APIs and their Endpoints from.pdf}
}

@misc{SpansOpenTelemetryLightstep,
  title = {Spans in {{OpenTelemetry}} | {{Lightstep}}'s {{OpenTelemetry Docs}}},
  url = {https://opentelemetry.lightstep.com/spans/},
  urldate = {2021-12-12},
  abstract = {Learn the basics of spans and how they are used in OpenTelemetry to develop observability in microservices and distributed systems.},
  langid = {english},
  file = {/home/adriano/Zotero/storage/PFX76T8K/spans.html}
}

@misc{sunaysvCreateCustomConnector,
  title = {Create a Custom Connector from an {{OpenAPI}} Definition},
  author = {{sunaysv}},
  url = {https://docs.microsoft.com/en-us/connectors/custom-connectors/define-openapi-definition},
  urldate = {2021-11-07},
  abstract = {Use an OpenAPI definition to create a custom connector for Azure Logic Apps, Power Automate, and Power Apps},
  langid = {american},
  file = {/home/adriano/Zotero/storage/F6QWFHS2/define-openapi-definition.html}
}

@misc{sunaysvCustomConnectorsOverview,
  title = {Custom Connectors Overview},
  author = {{sunaysv}},
  url = {https://docs.microsoft.com/en-us/connectors/custom-connectors/},
  urldate = {2021-11-07},
  abstract = {Overview about creating custom connectors for supporting and expanding integration scenarios.},
  langid = {american},
  file = {/home/adriano/Zotero/storage/8866FPKA/custom-connectors.html}
}

@incollection{tanenbaumChapter10Distributed2007,
  title = {Chapter 10: {{Distributed Object-Based Systems}}},
  booktitle = {Distributed Systems: Principles and Paradigms},
  author = {Tanenbaum, Andrew S. and van Steen, Maarten},
  year = {2007},
  edition = {Second},
  publisher = {{Pearson Prentice Hall}},
  isbn = {978-0-13-239227-3},
  langid = {english},
  lccn = {QA76.9.D5 T36 2007},
  keywords = {Distributed operating systems (Computers),Distributed processing,Electronic data processing},
  annotation = {OCLC: ocm70707891},
  file = {/home/adriano/Zotero/storage/QW83MSZ6/Tanenbaum and Steen - 2007 - Distributed systems principles and paradigms.pdf}
}

@article{taylorComponentMessagebasedArchitectural1996a,
  title = {A Component- and Message-Based Architectural Style for {{GUI}} Software},
  author = {Taylor, R.N. and Medvidovic, N. and Anderson, K.M. and Whitehead, E.J. and Robbins, J.E. and Nies, K.A. and Oreizy, P. and Dubrow, D.L.},
  year = {1996},
  month = jun,
  journal = {IEEE Transactions on Software Engineering},
  volume = {22},
  number = {6},
  pages = {390--406},
  issn = {1939-3520},
  doi = {10.1109/32.508313},
  abstract = {While a large fraction of application code is devoted to graphical user interface (GUI) functions, support for reuse in this domain has largely been confined to the creation of GUI toolkits ("widgets"). We present a novel architectural style directed at supporting larger grain reuse and flexible system composition. Moreover, the style supports design of distributed, concurrent applications. Asynchronous notification messages and asynchronous request messages are the sole basis for intercomponent communication. A key aspect of the style is that components are not built with any dependencies on what typically would be considered lower-level components, such as user interface toolkits. Indeed, all components are oblivious to the existence of any components to which notification messages are sent. While our focus has been on applications involving graphical user interfaces, the style has the potential for broader applicability. Several trial applications using the style are described.},
  keywords = {Application software,Artificial intelligence,Computer architecture,Computer languages,Concurrent computing,Graphical user interfaces,Graphics,Runtime,Software tools,User interfaces},
  file = {/home/adriano/Zotero/storage/E6WKWMBD/Taylor et al. - 1996 - A component- and message-based architectural style.pdf}
}

@book{taylorSoftwareArchitectureFoundations2009,
  title = {Software {{Architecture}}: {{Foundations}}, {{Theory}}, and {{Practice}}},
  shorttitle = {Software {{Architecture}}},
  author = {Taylor, Richard N. and Medvidovic, Nenad and Dashofy, Eric},
  year = {2009},
  month = jan,
  publisher = {{John Wiley \& Sons}},
  abstract = {Software architecture is foundational to the development of large, practical software-intensive applications. This brand-new text covers all facets of software architecture and how it serves as the intellectual centerpiece of software development and evolution. Critically, this text focuses on supporting creation of real implemented systems. Hence the text details not only modeling techniques, but design, implementation, deployment, and system adaptation -- as well as a host of other topics -- putting the elements in context and comparing and contrasting them with one another. Rather than focusing on one method, notation, tool, or process, this new text/reference widely surveys software architecture techniques, enabling the instructor and practitioner to choose the right tool for the job at hand. Software Architecture is intended for upper-division undergraduate and graduate courses in software architecture, software design, component-based software engineering, and distributed systems; the text may also be used in introductory as well as advanced software engineering courses.},
  googlebooks = {j9pdGQAACAAJ},
  isbn = {978-0-470-16774-8},
  langid = {english},
  keywords = {Computers / Programming / General,Computers / Software Development \& Engineering / General}
}

@misc{UCISoftwareArchitecture,
  title = {{{UCI Software Architecture Research}} - {{UCI Software Architecture Research}}: {{C2 Style Rules}}},
  url = {http://isr.uci.edu/architecture/c2StyleRules.html},
  urldate = {2022-01-04},
  file = {/home/adriano/Zotero/storage/T2JHZMG6/c2StyleRules.html}
}

@incollection{westerveldChapterOpenAPIAPI2021,
  title = {Chapter 3: {{OpenAPI}} and {{API Specifications}}},
  booktitle = {{{API Testing}} and {{Development}} with {{Postman}}},
  author = {Westerveld, Dave},
  year = {2021},
  month = may,
  publisher = {{Packt Publishing}},
  url = {https://learning.oreilly.com/library/view/api-testing-and/9781800569201/},
  urldate = {2022-01-16},
  abstract = {Explore the world of APIs and learn how to integrate them with production-ready applications using Postman and the Newman CLIKey FeaturesLearn the tenets of effective API testing and API...},
  isbn = {978-1-80056-920-1},
  langid = {english},
  file = {/home/adriano/Zotero/storage/UT6NRLLT/9781800569201.html}
}

@misc{WhatOODALoop,
  title = {What Is {{OODA}} Loop? - {{Definition}} from {{WhatIs}}.Com},
  url = {https://www.techtarget.com/searchcio/definition/OODA-loop},
  urldate = {2022-05-18},
  file = {/home/adriano/Zotero/storage/67MLQBJC/OODA-loop.html}
}

@misc{WhatOpenAPIIntroduction,
  title = {What Is {{OpenAPI}}? {{Introduction}} to {{OpenAPI Specification}} ({{OAS}})},
  shorttitle = {What Is {{OpenAPI}}?},
  journal = {What is OpenAPI? Introduction to OpenAPI Specification (OAS)},
  url = {https://blog.apideck.com/introduction-to-openapi-specification},
  urldate = {2022-01-22},
  abstract = {OpenAPI continues to evolve and sustain a vibrant, interconnected API economy. Here, we define what exactly OpenAPI is, how OpenAPI definitions are structured, and peek into some production implementations that demonstrate the power of OpenAPI.},
  langid = {english},
  file = {/home/adriano/Zotero/storage/FEWTHGYA/introduction-to-openapi-specification.html}
}

@inproceedings{whiteArchitecturalApproachAutonomic2004,
  title = {An Architectural Approach to Autonomic Computing},
  booktitle = {International {{Conference}} on {{Autonomic Computing}}, 2004. {{Proceedings}}.},
  author = {White, S.R. and Hanson, J.E. and Whalley, I. and Chess, D.M. and Kephart, J.O.},
  year = {2004},
  pages = {2--9},
  publisher = {{IEEE}},
  address = {{New York, NY, USA}},
  doi = {10.1109/ICAC.2004.1301340},
  abstract = {We describe an architectural approach to achieving the goals of autonomic computing. The architecture that we outline describes interfaces and behavioral requirements for individual system components, describes how interactions among components are established, and recommends design patterns that engender the desired system-level properties of selfconfiguration, self-optimization, self-healing and selfprotection. We have validated many of these ideas in two prototype autonomic computing systems.},
  isbn = {978-0-7695-2114-5},
  langid = {english},
  file = {/home/adriano/Zotero/storage/WQD3LIZY/White et al. - 2004 - An architectural approach to autonomic computing.pdf}
}

@misc{WS1201CloudDokumentation,
  title = {({{WS12-01}}) {{Cloud}}/{{Dokumentation}} \textendash{} {{Verteilte Systeme}} - {{Wiki}}},
  url = {https://wwwvs.cs.hs-rm.de/vs-wiki/index.php/(WS12-01)_Cloud/Dokumentation},
  urldate = {2021-12-11},
  file = {/home/adriano/Zotero/storage/EUCHM6YM/Dokumentation.html}
}

@inproceedings{xuBlockchainSoftwareConnector2016,
  title = {The {{Blockchain}} as a {{Software Connector}}},
  booktitle = {2016 13th {{Working IEEE}}/{{IFIP Conference}} on {{Software Architecture}} ({{WICSA}})},
  author = {Xu, Xiwei and Pautasso, Cesare and Zhu, Liming and Gramoli, Vincent and Ponomarev, Alexander and Tran, An Binh and Chen, Shiping},
  year = {2016},
  month = apr,
  pages = {182--191},
  doi = {10.1109/WICSA.2016.21},
  abstract = {Blockchain is an emerging technology for decentralized and transactional data sharing across a large network of untrusted participants. It enables new forms of distributed software architectures, where components can find agreements on their shared states without trusting a central integration point or any particular participating components. Considering the blockchain as a software connector helps make explicitly important architectural considerations on the resulting performance and quality attributes (for example, security, privacy, scalability and sustainability) of the system. Based on our experience in several projects using blockchain, in this paper we provide rationales to support the architectural decision on whether to employ a decentralized blockchain as opposed to other software solutions, like traditional shared data storage. Additionally, we explore specific implications of using the blockchain as a software connector including design trade-offs regarding quality attributes.},
  keywords = {Architecture connector,Australia,Blockchain,Connectors,Contracts,Cryptography,Design,Online banking,Peer-to-peer computing,Software,Trade-off},
  file = {/home/adriano/Zotero/storage/FFPYL4JR/Xu et al. - 2016 - The Blockchain as a Software Connector.pdf;/home/adriano/Zotero/storage/WGSH6LS4/7516828.html}
}

@misc{zorrillacastroNETCoreApps2021,
  type = {{Conference}},
  title = {{.NET Core Apps: How to Debug and Diagnose}},
  shorttitle = {{.NET Core Apps}},
  author = {Zorrilla Castro, Unai},
  year = {2021},
  month = jun,
  address = {{Online}},
  url = {https://www.youtube.com/watch?v=Hw__DetUlOY},
  urldate = {2022-08-23},
  copyright = {Licencia Atribuci\'on de Creative Commons (reutilizaci\'on permitida)},
  langid = {spanish}
}


