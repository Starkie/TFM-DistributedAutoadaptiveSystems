
@techreport{ArchitecturalBlueprintAutonomic2006,
  title = {An {{Architectural Blueprint}} for {{Autonomic Computing}}},
  year = {2006},
  institution = {{IBM}},
  url = {https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.150.1011&rep=rep1&type=pdf},
  urldate = {2021-12-11},
  langid = {english},
  file = {/home/adriano/Zotero/storage/I395HKBZ/download.pdf;/home/adriano/Zotero/storage/P5C8NX9R/AC Blueprint White Paper V7.pdf}
}

@incollection{brunEngineeringSelfAdaptiveSystems2009,
  title = {Engineering {{Self-Adaptive Systems}} through {{Feedback Loops}}},
  booktitle = {Software {{Engineering}} for {{Self-Adaptive Systems}}},
  author = {Brun, Yuriy and Di Marzo Serugendo, Giovanna and Gacek, Cristina and Giese, Holger and Kienle, Holger and Litoiu, Marin and M{\"u}ller, Hausi and Pezz{\`e}, Mauro and Shaw, Mary},
  editor = {Cheng, Betty H. C. and {de Lemos}, Rog{\'e}rio and Giese, Holger and Inverardi, Paola and Magee, Jeff},
  year = {2009},
  pages = {48--70},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-02161-9_3},
  url = {https://doi.org/10.1007/978-3-642-02161-9_3},
  urldate = {2022-04-09},
  abstract = {To deal with the increasing complexity of software systems and uncertainty of their environments, software engineers have turned to self-adaptivity. Self-adaptive systems are capable of dealing with a continuously changing environment and emerging requirements that may be unknown at design-time. However, building such systems cost-effectively and in a predictable manner is a major engineering challenge. In this paper, we explore the state-of-the-art in engineering self-adaptive systems and identify potential improvements in the design process.},
  isbn = {978-3-642-02161-9},
  langid = {english},
  file = {/home/adriano/Zotero/storage/CICVGI37/Brun et al. - 2009 - Engineering Self-Adaptive Systems through Feedback.pdf}
}

@book{burnsDesigningDistributedSystems2018,
  title = {Designing {{Distributed Systems}}},
  author = {Burns, Brendan},
  year = {2018},
  month = feb,
  publisher = {{O'Reilly Media}},
  url = {https://learning.oreilly.com/library/view/designing-distributed-systems/9781491983638/},
  urldate = {2022-01-15},
  abstract = {Without established design patterns to guide them, developers have had to build distributed systems from scratch, and most of these systems are very unique indeed. Today, the increasing use of...},
  isbn = {978-1-4919-8363-8},
  langid = {english},
  file = {/home/adriano/Zotero/storage/8S4VCDKX/9781491983638.html}
}

@inproceedings{dashofyUsingOfftheshelfMiddleware1999a,
  title = {Using Off-the-Shelf Middleware to Implement Connectors in Distributed Software Architectures},
  booktitle = {Proceedings of the 1999 {{International Conference}} on {{Software Engineering}} ({{IEEE Cat}}. {{No}}.{{99CB37002}})},
  author = {Dashofy, E.M. and Medvidovic, N. and Taylor, R.N.},
  year = {1999},
  month = may,
  pages = {3--12},
  issn = {0270-5257},
  doi = {10.1145/302405.302407},
  abstract = {Software architectures promote development focused on modular building blocks and their interconnections. Since architecture-level components often contain complex functionality, it is reasonable to expect that their interactions will also be complex. Modeling and implementing software connectors thus becomes a key aspect of architecture-based development. Software interconnection and middleware technologies such as RMI, CORBA, ILU, and ActiveX provide a valuable service in building applications from components. The relation of such services to software connectors in the context of software architectures, however, is not well understood. To understand the tradeoffs among these technologies with respect to architectures, we have evaluated several off-the-shelf middleware technologies and identified key techniques for utilizing them in implementing software connectors. Our platform for investigation was C2, a component- and message-based architectural style. By encapsulating middleware functionality within software connectors, we have coupled C2's existing benefits such as component interchangeability, substrate independence and structural guidance with new capabilities of multi-lingual, multi-process and distributed application development in a manner that is transparent to architects.},
  keywords = {Application software,Computer architecture,Computer languages,Computer science,Connectors,LAN interconnection,Middleware,Object oriented modeling,Protocols,Software architecture},
  file = {/home/adriano/Zotero/storage/TBAB45EA/Dashofy et al. - 1999 - Using off-the-shelf middleware to implement connec.pdf;/home/adriano/Zotero/storage/IM635ALX/840990.html}
}

@book{DistributedTracingPractice,
  title = {Distributed {{Tracing}} in {{Practice}}},
  url = {https://learning.oreilly.com/library/view/distributed-tracing-in/9781492056621/},
  urldate = {2021-12-12},
  abstract = {Since most applications today are distributed in some fashion, monitoring their health and performance requires a new approach. Enter distributed tracing, a method of profiling and monitoring...},
  isbn = {978-1-4920-5662-1},
  langid = {english},
  file = {/home/adriano/Zotero/storage/F2BIY7RM/9781492056621.html}
}

@misc{EventDrivenArchitecturesAsyncAPI,
  title = {Event-{{Driven Architectures}} | {{AsyncAPI Initiative}} for Event-Driven {{APIs}}},
  url = {https://www.asyncapi.com/docs/getting-started/undefined/docs/getting-started/event-driven-architectures},
  urldate = {2021-10-10},
  abstract = {Many developers, architects, and product managers have used REST APIs and are familiar with the synchronous communication paradigm. You make a request and wait for the response. This is exactly how th},
  file = {/home/adriano/Zotero/storage/K44GKYGC/event-driven-architectures.html}
}

@inproceedings{fonsServiciosAdaptivereadyPara2021,
  title = {{Servicios adaptive-ready para la reconfiguraci\'on din\'amica de arquitecturas de microservicios}},
  shorttitle = {{JCIS2021}},
  booktitle = {{Actas de las XVI Jornadas de Ingenier\'ia de Ciencia e Ingenier\'ia de Servicios}},
  author = {Fons, Joan and Pelechano, Vicente and Gil, Miriam and Albert, Manoli},
  year = {2021},
  publisher = {{SISTEDES}},
  doi = {http://hdl.handle.net/11705/JCIS/2021/023},
  url = {http://hdl.handle.net/11705/JCIS/2021/023},
  abstract = {Las arquitecturas de microservicios ofrecen un enfoque para la ingenier\'ia de sistemas complejos y distribuidos en donde la escalabilidad y disponibilidad de las soluciones es un factor cr\'itico.En la \'ultima d\'ecada han surgido herramientas (orquestadores) orientadas a monitorizar y mantener de manera autom\'atica estas infraestructuras para garantizar la calidad del servicio.Sin embargo, estos orquestadores no est\'an dise\~nados para gestionar autom\'aticamente cambios arquitect\'onicos sobre la configuraci\'on de servicios, necesarios bajo ciertas condiciones operativas.Este trabajo promueve la aplicaci\'on de la computaci\'on aut\'onoma (a trav\'es del uso de bucles de control) como estrategia para la reconfiguraci\'on din\'amica de arquitecturas de microservicios.Para ello, se introduce el concepto de servicio adaptive-ready, como un microservicio que ofrece un contrato de adaptaci\'on dise\~nado ser usado por los bucles de control.Para ejemplificar la propuesta se utiliza un caso de estudio real en el que se aplican estos principios para desarrollar el sistema inform\'atico de una f\'abrica de producci\'on industrial.Se han dise\~nado e implementado un conjunto de servicios `adaptive-ready' y se ha desplegado una arquitectura de microservicios reconfigurable sobre kubernetes.},
  langid = {spanish},
  file = {/home/adriano/Zotero/storage/9MMHD39C/Fons et al. - Servicios adaptive-ready para la reconﬁguraci´on d.pdf}
}

@inproceedings{footeBigBallMud1997,
  title = {Big {{Ball}} of {{Mud}}},
  booktitle = {Fourth {{Conference}} on {{Patterns Languages}} of {{Programs}}},
  author = {Foote, Brian and Yoder, Joseph},
  year = {1997},
  month = sep,
  address = {{Monticello}},
  url = {http://laputan.org/mud/},
  urldate = {2022-01-23},
  file = {/home/adriano/Zotero/storage/ULEPICQE/mud.html}
}

@inbook{garlanINTRODUCTIONSOFTWAREARCHITECTURE1993,
  title = {{{AN INTRODUCTION TO SOFTWARE ARCHITECTURE}}},
  booktitle = {Series on {{Software Engineering}} and {{Knowledge Engineering}}},
  author = {Garlan, David and Shaw, Mary},
  year = {1993},
  month = dec,
  volume = {2},
  pages = {1--39},
  publisher = {{WORLD SCIENTIFIC}},
  doi = {10.1142/9789812798039_0001},
  url = {http://www.worldscientific.com/doi/abs/10.1142/9789812798039_0001},
  urldate = {2021-10-09},
  abstract = {This work was funded in part by the Department of Defense Advanced Research Project Agency under grant MDA972-92-J-1002, by National Science Foundation Grants CCR-9109469 and CCR-9112880, and by a grant from Siemens Corporate Research. It was also funded in part by the Carnegie Mellon University School of Computer Science and Software Engineering Institute (which is sponsored by the U.S. Department of Defense). The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the U.S. Government, the Department of Defense, the National Science Foundation, Siemens Corporation, or Carnegie Mellon University.},
  collaborator = {Ambriola, Vincenzo and Tortora, Genoveffa},
  isbn = {978-981-02-1594-1 978-981-279-803-9},
  langid = {english},
  file = {/home/adriano/Zotero/storage/DQPDIJPY/Garlan and Shaw - 1993 - AN INTRODUCTION TO SOFTWARE ARCHITECTURE.pdf}
}

@misc{gotoconferencesManyMeaningsEventDriven2017,
  title = {The {{Many Meanings}} of {{Event-Driven Architecture}} \textbullet{} {{Martin Fowler}} \textbullet{} {{GOTO}} 2017},
  author = {{GOTO Conferences}},
  year = {2017},
  month = may,
  url = {https://www.youtube.com/watch?v=STKCRSUsyP0},
  urldate = {2021-10-10},
  abstract = {This presentation was recorded at GOTO Chicago 2017. \#GOTOcon \#GOTOchgo http://gotochgo.com Martin Fowler - Author, Speaker, Consultant and General Loud-mouth on Software Development ABSTRACT During my career, I've often people heard people describe their systems as "event-driven". But when looking deeper that phrase seems to lead to some very different architectural assumptions. On a recent workshop we identified four different patterns [...] TIMECODES 0:00 What people mean by EDA 00:51 How he came to write down common patterns of EDA and hold this talk 02:45 4 patterns detected 03:20 Pattern 1: Event Notification 08:33 Events vs Commands 11:30 Pro: Decoupling 13:50 Contra: inability to understand what is going on by stepping through the code 14:53 Pattern 2: Event-carried State Transfer 20:51 Pattern 3: Event Sourcing 32:11 Can be a very nice system development-wise 33:43 Downside of Event Sourcing 38:46 Which events to record in the event store? 43:31 Pattern 4: CQRS 47:39 Conclusion : How to use the knowledge about those 4 patterns Read the full abstract here: https://gotochgo.com/2017/sessions/47 RECOMMENDED BOOKS Martin Fowler \& Pramod Sadalage \textbullet{} NoSQL Distilled \textbullet{} https://amzn.to/3ChIpu7 Martin Fowler \textbullet{} Patterns of Enterprise Application Architecture \textbullet{} https://amzn.to/3lp4sIq Martin Fowler \textbullet{} Domain-Specific Languages \textbullet{} https://amzn.to/3nzOIFk Martin Fowler \textbullet{} UML Distilled \textbullet{} https://amzn.to/3kahjyA Martin Fowler \textbullet{} Analysis Patterns \textbullet{} https://amzn.to/3Emabar https://twitter.com/gotochgo https://www.facebook.com/GOTOConference \#EventDrivenArchitecture \#EventDriven \#SoftwareArchitecture Looking for a unique learning experience? Attend the next GOTO Conference near you! Get your ticket at http://gotocon.com SUBSCRIBE TO OUR CHANNEL - new videos posted almost daily. https://www.youtube.com/user/GotoConf...}
}

@misc{hintjensReliableRequestReplyPatterns,
  title = {4. {{Reliable Request-Reply Patterns}}},
  author = {Hintjens},
  journal = {ZeroMQ Documentation},
  url = {https://zguide.zeromq.org/docs/chapter4/},
  urldate = {2022-01-15},
  abstract = {Chapter 4 - Reliable Request-Reply Patterns \#   Chapter 3 - Advanced Request-Reply Patterns covered advanced uses of ZeroMQ's request-reply pattern with working examples. This chapter looks at the general question of reliability and builds a set of reliable messaging patterns on top of ZeroMQ's core request-reply pattern. In this chapter, we focus heavily on user-space request-reply patterns, reusable models that help you design your own ZeroMQ architectures:  The Lazy Pirate pattern: reliable request-reply from the client side The Simple Pirate pattern: reliable request-reply using load balancing The Paranoid Pirate pattern: reliable request-reply with heartbeating The Majordomo pattern: service-oriented reliable queuing The Titanic pattern: disk-based/disconnected reliable queuing The Binary Star pattern: primary-backup server failover The Freelance pattern: brokerless reliable request-reply  What is ``Reliability''?},
  langid = {english},
  file = {/home/adriano/Zotero/storage/YRGMXKTR/chapter4.html}
}

@techreport{ieeeStandard420102011Systems2011,
  title = {Standard 42010-2011 - {{Systems}} and Software Engineering -- {{Architecture}} Description},
  author = {IEEE and ISO and IEC},
  year = {2011},
  url = {https://standards.ieee.org/standard/42010-2011.html},
  urldate = {2021-11-28},
  file = {/home/adriano/Zotero/storage/M53A8J8T/iso-iec-ieee-42010-2011.pdf;/home/adriano/Zotero/storage/VWNYMKXH/42010-2011.html}
}

@misc{jausovecFallaciesDistributedSystems2020,
  type = {Oracle {{Developers Blog}}},
  title = {Fallacies of Distributed Systems},
  shorttitle = {Oracle {{Developers Blog}}},
  author = {Jausovec, Peter},
  year = {2020},
  month = nov,
  journal = {Oracle Developers Blog},
  url = {https://blogs.oracle.com/developers/post/fallacies-of-distributed-systems},
  urldate = {2022-01-02},
  langid = {english},
  file = {/home/adriano/Zotero/storage/3V7RC95S/fallacies-of-distributed-systems.html}
}

@misc{JWTUMOIMAct,
  title = {{{JWTUMOIM}}: {{Act}} 3},
  url = {https://www.crummy.com/writing/speaking/2008-QCon/act3.html},
  urldate = {2022-01-02},
  file = {/home/adriano/Zotero/storage/VFFKCY8R/act3.html}
}

@article{kephartVisionAutonomicComputing2003,
  title = {The Vision of Autonomic Computing},
  author = {Kephart, J.O. and Chess, D.M.},
  year = {2003},
  month = jan,
  journal = {Computer},
  volume = {36},
  number = {1},
  pages = {41--50},
  issn = {1558-0814},
  doi = {10.1109/MC.2003.1160055},
  abstract = {A 2001 IBM manifesto observed that a looming software complexity crisis -caused by applications and environments that number into the tens of millions of lines of code - threatened to halt progress in computing. The manifesto noted the almost impossible difficulty of managing current and planned computing systems, which require integrating several heterogeneous environments into corporate-wide computing systems that extend into the Internet. Autonomic computing, perhaps the most attractive approach to solving this problem, creates systems that can manage themselves when given high-level objectives from administrators. Systems manage themselves according to an administrator's goals. New components integrate as effortlessly as a new cell establishes itself in the human body. These ideas are not science fiction, but elements of the grand challenge to create self-managing computing systems.},
  keywords = {Biology computing,Computer industry,Computer vision,Crisis management,Environmental management,Humans,Internet,LAN interconnection,Pervasive computing,Technological innovation},
  file = {/home/adriano/Zotero/storage/8XGCGFWZ/1160055.html}
}

@book{korabUnderstandingMessageBrokers2017,
  title = {Understanding {{Message Brokers}}},
  author = {Korab, Jakub},
  year = {2017},
  month = jun,
  publisher = {{O'Reilly Media}},
  url = {https://learning.oreilly.com/library/view/understanding-message-brokers/9781492049296/},
  urldate = {2022-01-15},
  abstract = {Messaging is one of the more poorly understood areas of IT; most developers and architects have only a passing familiarity with how broker-based messaging technologies work. This practical report...},
  isbn = {978-1-4920-4929-6},
  langid = {english},
  file = {/home/adriano/Zotero/storage/R5WVN5TZ/9781492049296.html}
}

@article{lopezBridgingGapSoftware2012,
  title = {Bridging the Gap between Software Architecture Rationale Formalisms and Actual Architecture Documents: {{An}} Ontology-Driven Approach},
  shorttitle = {Bridging the Gap between Software Architecture Rationale Formalisms and Actual Architecture Documents},
  author = {L{\'o}pez, Claudia and Codocedo, V{\'i}ctor and Astudillo, Hern{\'a}n and Cysneiros, Luiz Marcio},
  year = {2012},
  month = jan,
  journal = {Science of Computer Programming},
  series = {System and {{Software Solution Oriented Architectures}}},
  volume = {77},
  number = {1},
  pages = {66--80},
  issn = {0167-6423},
  doi = {10.1016/j.scico.2010.06.009},
  url = {https://www.sciencedirect.com/science/article/pii/S0167642310001218},
  urldate = {2021-11-28},
  abstract = {Documenting software architecture rationale is essential to reuse and evaluate architectures, and several modeling and documentation guidelines have been proposed in the literature. However, in practice creating and updating these documents rarely is a primary activity in most software projects, and rationale remains hidden in casual and semi-structured records, such as e-mails, meeting notes, wikis, and specialized documents. This paper describes the TREx (Toeska Rationale Extraction) approach to recover, represent and explore rationale information from text documents, combining: (1) pattern-based information extraction to recover rationale; (2) ontology-based representation of rationale and architectural concepts; and (3) facet-based interactive exploration of rationale. Initial results from TREx's application suggest that some kinds of architecture rationale can be semi-automatically extracted from a project's unstructured text documents, namely decisions, alternatives and requirements. The approach and some tools are illustrated with a case study of rationale recovery for a financial securities settlement system.},
  langid = {english},
  keywords = {Design rationale,Ontology,Rationale recovering,Semantic indexing,Software architecture},
  file = {/home/adriano/Zotero/storage/A33SMGGQ/López et al. - 2012 - Bridging the gap between software architecture rat.pdf}
}

@book{martinCleanArchitectureCraftsman2018,
  title = {Clean Architecture: A Craftsman's Guide to Software Structure and Design},
  shorttitle = {Clean Architecture},
  author = {Martin, Robert C.},
  year = {2018},
  series = {Robert {{C}}. {{Martin}} Series},
  publisher = {{Prentice Hall}},
  address = {{London, England}},
  abstract = {Building upon the success of best-sellers The Clean Coder and Clean Code, legendary software craftsman Robert C. "Uncle Bob" Martin shows how to bring greater professionalism and discipline to application architecture and design. As with his other books, Martin's Clean Architecture doesn't merely present multiple choices and options, and say "use your best judgment": it tells you what choices to make, and why those choices are critical to your success. Martin offers direct, no-nonsense answers to key architecture and design questions like: What are the best high level structures for different kinds of applications, including web, database, thick-client, console, and embedded apps? What are the core principles of software architecture? What is the role of the architect, and what is he/she really trying to achieve? What are the core principles of software design? How do designs and architectures go wrong, and what can you do about it? What are the disciplines and practices of professional architects and designers? Clean Architecture is essential reading for every software architect, systems analyst, system designer, and software manager -- and for any programmer who aspires to these roles or is impacted by their work},
  isbn = {978-0-13-449416-6},
  lccn = {QA76.76.D47 M36515 2018},
  keywords = {Computer programming,Computer software,COMPUTERS / Computer Architecture,Development,History,Software architecture},
  annotation = {OCLC: on1004983973}
}

@inproceedings{mehtaTaxonomySoftwareConnectors2000,
  title = {Towards a Taxonomy of Software Connectors},
  booktitle = {Proceedings of the 22nd International Conference on {{Software}} Engineering},
  author = {Mehta, Nikunj R. and Medvidovic, Nenad and Phadke, Sandeep},
  year = {2000},
  month = jun,
  series = {{{ICSE}} '00},
  pages = {178--187},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/337180.337201},
  url = {https://doi.org/10.1145/337180.337201},
  urldate = {2021-10-09},
  abstract = {Software systems of today are frequently composed from prefabricated, heterogeneous components that provide complex functionality and engage in complex interactions. Existing research on component-based development has mostly focused on component structure, interfaces, and functionality. Recently, software architecture has emerged as an area that also places significant importance on component interactions, embodied in the notion of software connectors. However, the current level of understanding and support for connectors has been insufficient. This has resulted in their inconsistent treatment and a notable lack of understanding of what the fundamental building blocks of software interaction are and how they can be composed into more complex interactions. This paper attempts to address this problem. It presents a comprehensive classification framework and taxonomy of software connectors. The taxonomy is obtained through an extensive analysis of existing component interactions. The taxonomy is used both to understand existing software connectors and to suggest new, unprecedented connectors. We demonstrate the use of the taxonomy on the architecture of a large, existing system.},
  isbn = {978-1-58113-206-9},
  keywords = {classification,software architecture,software connector,taxonomy},
  file = {/home/adriano/Zotero/storage/MNVGKGMD/Mehta and Phadke - Towards a Taxonomy of Software Connectors.pdf}
}

@misc{nallyRESTVsRPC2018,
  type = {Blog},
  title = {{{REST}} vs. {{RPC}}: What Problems Are You Trying to Solve with Your {{APIs}}?},
  shorttitle = {{{REST}} vs. {{RPC}}},
  author = {Nally, Martin},
  year = {2018},
  month = oct,
  journal = {Google Cloud Blog},
  url = {https://cloud.google.com/blog/products/application-development/rest-vs-rpc-what-problems-are-you-trying-to-solve-with-your-apis/},
  urldate = {2022-01-08},
  abstract = {It's important to think about the fundamental problem you are trying to solve with your API because the style of API you create and the technologies you choose depend on your answer.},
  langid = {english},
  file = {/home/adriano/Zotero/storage/N36M8GVI/rest-vs-rpc-what-problems-are-you-trying-to-solve-with-your-apis.html}
}

@misc{NETCoreApps,
  title = {.{{NET Core Apps}}: {{How}} to {{Debug}} and {{Diagnose}} | {{DotNet}} 2021 - {{YouTube}}},
  url = {https://www.youtube.com/watch?v=Hw__DetUlOY},
  urldate = {2021-12-12}
}

@book{newmanBuildingMicroservicesDesigning2021,
  title = {Building {{Microservices}}: {{Designing Fine-Grained Systems}}},
  author = {Newman, Sam},
  year = {2021},
  month = aug,
  publisher = {{O'Reilly Media, Inc.}},
  url = {https://learning.oreilly.com/library/view/building-microservices-2nd/9781492034018/},
  urldate = {2021-12-31},
  abstract = {As organizations shift from monolithic applications to smaller, self-contained microservices, distributed systems have become more fine-grained. But developing these new systems brings its own...},
  isbn = {978-1-4920-3401-8},
  langid = {english},
  file = {/home/adriano/Zotero/storage/3LT2REPK/9781492034018.html}
}

@misc{openapi_initiativeOpenAPISpecificationV3,
  title = {{{OpenAPI Specification}} v3.1.0},
  author = {OpenAPI\_Initiative},
  url = {https://spec.openapis.org/oas/latest.html},
  urldate = {2022-01-16},
  file = {/home/adriano/Zotero/storage/3TAYP5L3/latest.html}
}

@misc{OpenAPISpecificationV3,
  title = {{{OpenAPI Specification}} v3.1.0 | {{Introduction}}, {{Definitions}}, \& {{More}}},
  url = {https://spec.openapis.org/oas/latest.html},
  urldate = {2021-11-14},
  file = {/home/adriano/Zotero/storage/ZX5393IT/latest.html}
}

@article{perryFoundationsStudySoftware1992,
  title = {Foundations for the {{Study}} of {{Software Architecture}}},
  author = {Perry, Dewayne and Wolf, Alexander},
  year = {1992},
  month = oct,
  journal = {ACM SIGSOFT Software Engineering Notes},
  volume = {17},
  doi = {10.1145/141874.141884},
  abstract = {The purpose of this paper is to build the foundation for software architecture. Wefirstdevelop an intuition for software architecture by appealing to several wellestablished architectural disciplines. On the basis of this intuition, we present a model of software architecture that consists of three components: elements, form, and rationale. Elements are either processing, data, or connecting elements. Form is defined in terms of the properties of, and the relationships among, the elements --- that is, the constraints on the elements. The rationale provides the underlying basis for the architecture in terms of the system constraints, which most often derive from the system requirements. We discuss the components of the model in the context of both architectures and architectural styles and present an extended example to illustrate some importantarchitecture and style considerations. We conclude by presenting some of the benefits of our approach to software architecture, summarizing our ...},
  file = {/home/adriano/Downloads/swa-sen.pdf}
}

@misc{rabbitmqPublishSubscribeDocumentation,
  title = {Publish/{{Subscribe}} Documentation},
  author = {RabbitMQ},
  url = {https://www.rabbitmq.com/tutorials/tutorial-three-dotnet.html},
  urldate = {2022-01-15},
  file = {/home/adriano/Zotero/storage/3UFZNW36/tutorial-three-dotnet.html}
}

@misc{RESTAPIsMust,
  title = {{{REST APIs}} Must Be Hypertext-Driven \guillemotright{} {{Untangled}}},
  url = {https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven},
  urldate = {2022-01-02},
  file = {/home/adriano/Zotero/storage/XEFVK6WG/rest-apis-must-be-hypertext-driven.html}
}

@misc{RichardsonMaturityModel,
  title = {Richardson {{Maturity Model}}},
  journal = {martinfowler.com},
  url = {https://martinfowler.com/articles/richardsonMaturityModel.html},
  urldate = {2022-01-02},
  abstract = {Leonard Richardson's model for understanding a RESTful architecture as steps in a maturity model. Levels are (1) resources, (2) HTTP verbs and return codes, and (3) hypertext controls.},
  file = {/home/adriano/Zotero/storage/86W975MP/richardsonMaturityModel.html}
}

@book{richardsonRESTfulWebServices2007,
  title = {{{RESTful Web Services}}},
  author = {Richardson, Leonard and Ruby, Sam},
  year = {2007},
  month = may,
  publisher = {{O'Reilly Media}},
  url = {https://learning.oreilly.com/library/view/restful-web-services/9780596529260/},
  urldate = {2022-01-02},
  abstract = {"Every developer working with the Web needs to read this book."-- David Heinemeier Hansson, creator of the Rails framework"RESTful Web Services finally provides a practical roadmap for...},
  isbn = {978-0-596-52926-0},
  langid = {english},
  file = {/home/adriano/Zotero/storage/9TN4DRQI/9780596529260.html}
}

@book{royRabbitMQDepth2017,
  title = {{{RabbitMQ}} in {{Depth}}},
  author = {Roy, Gavin},
  year = {2017},
  month = sep,
  publisher = {{Manning Publications}},
  url = {https://learning.oreilly.com/library/view/rabbitmq-in-depth/9781617291005/},
  urldate = {2022-01-15},
  abstract = {About the Technology At the heart of most modern distributed applications is a queue that buffers, prioritizes, and routes message traffic. RabbitMQ is a high-performance message broker based on...},
  isbn = {978-1-61729-100-5},
  langid = {english},
  file = {/home/adriano/Zotero/storage/8J5HVYXR/9781617291005.html}
}

@misc{ServiceDesignPatterns,
  title = {Service {{Design Patterns}} - {{Web Service Infrastructures}} - {{Service Connector}}},
  url = {http://www.servicedesignpatterns.com/webserviceinfrastructures/serviceconnector},
  urldate = {2021-10-09},
  file = {/home/adriano/Zotero/storage/EISQQFJI/serviceconnector.html}
}

@misc{ServiciosAdaptivereadyParaa,
  title = {Servicios Adaptive-Ready Para La Reconfiguraci\'on Din\'amica de Arquitecturas de Microservicios |},
  url = {https://biblioteca.sistedes.es/articulo/servicios-adaptive-ready-para-la-reconfiguracion-dinamica-de-arquitecturas-de-microservicios/},
  urldate = {2021-12-11},
  file = {/home/adriano/Zotero/storage/XB6SVK87/servicios-adaptive-ready-para-la-reconfiguracion-dinamica-de-arquitecturas-de-microservicios.html}
}

@misc{SpansOpenTelemetryLightstep,
  title = {Spans in {{OpenTelemetry}} | {{Lightstep}}'s {{OpenTelemetry Docs}}},
  url = {https://opentelemetry.lightstep.com/spans/},
  urldate = {2021-12-12},
  abstract = {Learn the basics of spans and how they are used in OpenTelemetry to develop observability in microservices and distributed systems.},
  langid = {english},
  file = {/home/adriano/Zotero/storage/PFX76T8K/spans.html}
}

@misc{sunaysvCreateCustomConnector,
  title = {Create a Custom Connector from an {{OpenAPI}} Definition},
  author = {{sunaysv}},
  url = {https://docs.microsoft.com/en-us/connectors/custom-connectors/define-openapi-definition},
  urldate = {2021-11-07},
  abstract = {Use an OpenAPI definition to create a custom connector for Azure Logic Apps, Power Automate, and Power Apps},
  langid = {american},
  file = {/home/adriano/Zotero/storage/F6QWFHS2/define-openapi-definition.html}
}

@misc{sunaysvCustomConnectorsOverview,
  title = {Custom Connectors Overview},
  author = {{sunaysv}},
  url = {https://docs.microsoft.com/en-us/connectors/custom-connectors/},
  urldate = {2021-11-07},
  abstract = {Overview about creating custom connectors for supporting and expanding integration scenarios.},
  langid = {american},
  file = {/home/adriano/Zotero/storage/8866FPKA/custom-connectors.html}
}

@incollection{tanenbaumChapter10Distributed2007,
  title = {Chapter 10: {{Distributed Object-Based Systems}}},
  booktitle = {Distributed Systems: Principles and Paradigms},
  author = {Tanenbaum, Andrew S. and van Steen, Maarten},
  year = {2007},
  edition = {Second},
  publisher = {{Pearson Prentice Hall}},
  isbn = {978-0-13-239227-3},
  langid = {english},
  lccn = {QA76.9.D5 T36 2007},
  keywords = {Distributed operating systems (Computers),Distributed processing,Electronic data processing},
  annotation = {OCLC: ocm70707891},
  file = {/home/adriano/Zotero/storage/QW83MSZ6/Tanenbaum and Steen - 2007 - Distributed systems principles and paradigms.pdf}
}

@book{taylorSoftwareArchitectureFoundations2009,
  title = {Software {{Architecture}}: {{Foundations}}, {{Theory}}, and {{Practice}}},
  shorttitle = {Software {{Architecture}}},
  author = {Taylor, Richard N. and Medvidovic, Nenad and Dashofy, Eric},
  year = {2009},
  month = jan,
  publisher = {{John Wiley \& Sons}},
  abstract = {Software architecture is foundational to the development of large, practical software-intensive applications. This brand-new text covers all facets of software architecture and how it serves as the intellectual centerpiece of software development and evolution. Critically, this text focuses on supporting creation of real implemented systems. Hence the text details not only modeling techniques, but design, implementation, deployment, and system adaptation -- as well as a host of other topics -- putting the elements in context and comparing and contrasting them with one another. Rather than focusing on one method, notation, tool, or process, this new text/reference widely surveys software architecture techniques, enabling the instructor and practitioner to choose the right tool for the job at hand. Software Architecture is intended for upper-division undergraduate and graduate courses in software architecture, software design, component-based software engineering, and distributed systems; the text may also be used in introductory as well as advanced software engineering courses.},
  googlebooks = {j9pdGQAACAAJ},
  isbn = {978-0-470-16774-8},
  langid = {english},
  keywords = {Computers / Programming / General,Computers / Software Development \& Engineering / General}
}

@misc{UCISoftwareArchitecture,
  title = {{{UCI Software Architecture Research}} - {{UCI Software Architecture Research}}: {{C2 Style Rules}}},
  url = {http://isr.uci.edu/architecture/c2StyleRules.html},
  urldate = {2022-01-04},
  file = {/home/adriano/Zotero/storage/T2JHZMG6/c2StyleRules.html}
}

@incollection{westerveldChapterOpenAPIAPI2021,
  title = {Chapter 3: {{OpenAPI}} and {{API Specifications}}},
  booktitle = {{{API Testing}} and {{Development}} with {{Postman}}},
  author = {Westerveld, Dave},
  year = {2021},
  month = may,
  publisher = {{Packt Publishing}},
  url = {https://learning.oreilly.com/library/view/api-testing-and/9781800569201/},
  urldate = {2022-01-16},
  abstract = {Explore the world of APIs and learn how to integrate them with production-ready applications using Postman and the Newman CLIKey FeaturesLearn the tenets of effective API testing and API...},
  isbn = {978-1-80056-920-1},
  langid = {english},
  file = {/home/adriano/Zotero/storage/UT6NRLLT/9781800569201.html}
}

@misc{WhatOODALoop,
  title = {What Is {{OODA}} Loop? - {{Definition}} from {{WhatIs}}.Com},
  url = {https://www.techtarget.com/searchcio/definition/OODA-loop},
  urldate = {2022-05-18},
  file = {/home/adriano/Zotero/storage/67MLQBJC/OODA-loop.html}
}

@misc{WhatOpenAPIIntroduction,
  title = {What Is {{OpenAPI}}? {{Introduction}} to {{OpenAPI Specification}} ({{OAS}})},
  shorttitle = {What Is {{OpenAPI}}?},
  journal = {What is OpenAPI? Introduction to OpenAPI Specification (OAS)},
  url = {https://blog.apideck.com/introduction-to-openapi-specification},
  urldate = {2022-01-22},
  abstract = {OpenAPI continues to evolve and sustain a vibrant, interconnected API economy. Here, we define what exactly OpenAPI is, how OpenAPI definitions are structured, and peek into some production implementations that demonstrate the power of OpenAPI.},
  langid = {english},
  file = {/home/adriano/Zotero/storage/FEWTHGYA/introduction-to-openapi-specification.html}
}

@inproceedings{whiteArchitecturalApproachAutonomic2004,
  title = {An Architectural Approach to Autonomic Computing},
  booktitle = {International {{Conference}} on {{Autonomic Computing}}, 2004. {{Proceedings}}.},
  author = {White, S.R. and Hanson, J.E. and Whalley, I. and Chess, D.M. and Kephart, J.O.},
  year = {2004},
  pages = {2--9},
  publisher = {{IEEE}},
  address = {{New York, NY, USA}},
  doi = {10.1109/ICAC.2004.1301340},
  url = {http://ieeexplore.ieee.org/document/1301340/},
  urldate = {2021-12-11},
  abstract = {We describe an architectural approach to achieving the goals of autonomic computing. The architecture that we outline describes interfaces and behavioral requirements for individual system components, describes how interactions among components are established, and recommends design patterns that engender the desired system-level properties of selfconfiguration, self-optimization, self-healing and selfprotection. We have validated many of these ideas in two prototype autonomic computing systems.},
  isbn = {978-0-7695-2114-5},
  langid = {english},
  file = {/home/adriano/Zotero/storage/WQD3LIZY/White et al. - 2004 - An architectural approach to autonomic computing.pdf}
}

@misc{WS1201CloudDokumentation,
  title = {({{WS12-01}}) {{Cloud}}/{{Dokumentation}} \textendash{} {{Verteilte Systeme}} - {{Wiki}}},
  url = {https://wwwvs.cs.hs-rm.de/vs-wiki/index.php/(WS12-01)_Cloud/Dokumentation},
  urldate = {2021-12-11},
  file = {/home/adriano/Zotero/storage/EUCHM6YM/Dokumentation.html}
}

@inproceedings{xuBlockchainSoftwareConnector2016,
  title = {The {{Blockchain}} as a {{Software Connector}}},
  booktitle = {2016 13th {{Working IEEE}}/{{IFIP Conference}} on {{Software Architecture}} ({{WICSA}})},
  author = {Xu, Xiwei and Pautasso, Cesare and Zhu, Liming and Gramoli, Vincent and Ponomarev, Alexander and Tran, An Binh and Chen, Shiping},
  year = {2016},
  month = apr,
  pages = {182--191},
  doi = {10.1109/WICSA.2016.21},
  abstract = {Blockchain is an emerging technology for decentralized and transactional data sharing across a large network of untrusted participants. It enables new forms of distributed software architectures, where components can find agreements on their shared states without trusting a central integration point or any particular participating components. Considering the blockchain as a software connector helps make explicitly important architectural considerations on the resulting performance and quality attributes (for example, security, privacy, scalability and sustainability) of the system. Based on our experience in several projects using blockchain, in this paper we provide rationales to support the architectural decision on whether to employ a decentralized blockchain as opposed to other software solutions, like traditional shared data storage. Additionally, we explore specific implications of using the blockchain as a software connector including design trade-offs regarding quality attributes.},
  keywords = {Architecture connector,Australia,Blockchain,Connectors,Contracts,Cryptography,Design,Online banking,Peer-to-peer computing,Software,Trade-off},
  file = {/home/adriano/Zotero/storage/FFPYL4JR/Xu et al. - 2016 - The Blockchain as a Software Connector.pdf;/home/adriano/Zotero/storage/WGSH6LS4/7516828.html}
}


