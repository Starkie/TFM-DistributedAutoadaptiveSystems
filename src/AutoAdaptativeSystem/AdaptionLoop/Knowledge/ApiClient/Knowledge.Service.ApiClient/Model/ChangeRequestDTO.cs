/*
 * Knowledge Service
 *
 * Demonstrates all the existing operations to access and manage Knowledge properties.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Knowledge.Service.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = Knowledge.Service.ApiClient.Client.OpenAPIDateConverter;

namespace Knowledge.Service.ApiClient.Model
{
    /// <summary>
    /// ChangeRequestDTO
    /// </summary>
    [DataContract(Name = "ChangeRequestDTO")]
    public partial class ChangeRequestDTO : IEquatable<ChangeRequestDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangeRequestDTO" /> class.
        /// </summary>
        /// <param name="serviceName">serviceName.</param>
        /// <param name="propertyName">propertyName.</param>
        /// <param name="propertyNewValue">propertyNewValue.</param>
        public ChangeRequestDTO(string serviceName = default(string), string propertyName = default(string), string propertyNewValue = default(string))
        {
            this.ServiceName = serviceName;
            this.PropertyName = propertyName;
            this.PropertyNewValue = propertyNewValue;
        }

        /// <summary>
        /// Gets or Sets ServiceName
        /// </summary>
        [DataMember(Name = "serviceName", EmitDefaultValue = true)]
        public string ServiceName { get; set; }

        /// <summary>
        /// Gets or Sets PropertyName
        /// </summary>
        [DataMember(Name = "propertyName", EmitDefaultValue = true)]
        public string PropertyName { get; set; }

        /// <summary>
        /// Gets or Sets PropertyNewValue
        /// </summary>
        [DataMember(Name = "propertyNewValue", EmitDefaultValue = true)]
        public string PropertyNewValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChangeRequestDTO {\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("  PropertyNewValue: ").Append(PropertyNewValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangeRequestDTO);
        }

        /// <summary>
        /// Returns true if ChangeRequestDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangeRequestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangeRequestDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ServiceName == input.ServiceName ||
                    (this.ServiceName != null &&
                    this.ServiceName.Equals(input.ServiceName))
                ) && 
                (
                    this.PropertyName == input.PropertyName ||
                    (this.PropertyName != null &&
                    this.PropertyName.Equals(input.PropertyName))
                ) && 
                (
                    this.PropertyNewValue == input.PropertyNewValue ||
                    (this.PropertyNewValue != null &&
                    this.PropertyNewValue.Equals(input.PropertyNewValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServiceName != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceName.GetHashCode();
                }
                if (this.PropertyName != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyName.GetHashCode();
                }
                if (this.PropertyNewValue != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyNewValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
