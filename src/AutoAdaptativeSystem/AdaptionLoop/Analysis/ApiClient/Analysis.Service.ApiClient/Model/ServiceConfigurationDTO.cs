/*
 * Analysis Service
 *
 * Demonstrates all the existing operations to access and manage Adaption Rules.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Analysis.Service.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = Analysis.Service.ApiClient.Client.OpenAPIDateConverter;

namespace Analysis.Service.ApiClient.Model
{
    /// <summary>
    /// ServiceConfigurationDTO
    /// </summary>
    [DataContract(Name = "ServiceConfigurationDTO")]
    public partial class ServiceConfigurationDTO : IEquatable<ServiceConfigurationDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceConfigurationDTO" /> class.
        /// </summary>
        /// <param name="serviceName">serviceName.</param>
        /// <param name="isDeployed">isActive.</param>
        /// <param name="configurationProperties">configurationProperties.</param>
        /// <param name="bindings">bindings.</param>
        public ServiceConfigurationDTO(string serviceName = default(string), bool isDeployed = default(bool), List<ConfigurationProperty> configurationProperties = default(List<ConfigurationProperty>), List<BindingConfiguration> bindings = default(List<BindingConfiguration>))
        {
            this.ServiceName = serviceName;
            this.IsDeployed = isDeployed;
            this.ConfigurationProperties = configurationProperties;
            this.Bindings = bindings;
        }

        /// <summary>
        /// Gets or Sets ServiceName
        /// </summary>
        [DataMember(Name = "serviceName", EmitDefaultValue = true)]
        public string ServiceName { get; set; }

        /// <summary>
        /// Gets or Sets IsDeployed
        /// </summary>
        [DataMember(Name = "isDeployed", EmitDefaultValue = true)]
        public bool IsDeployed { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurationProperties
        /// </summary>
        [DataMember(Name = "configurationProperties", EmitDefaultValue = true)]
        public List<ConfigurationProperty> ConfigurationProperties { get; set; }

        /// <summary>
        /// Gets or Sets Bindings
        /// </summary>
        [DataMember(Name = "bindings", EmitDefaultValue = true)]
        public List<BindingConfiguration> Bindings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServiceConfigurationDTO {\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  IsActive: ").Append(IsDeployed).Append("\n");
            sb.Append("  ConfigurationProperties: ").Append(ConfigurationProperties).Append("\n");
            sb.Append("  Bindings: ").Append(Bindings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceConfigurationDTO);
        }

        /// <summary>
        /// Returns true if ServiceConfigurationDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceConfigurationDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceConfigurationDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.ServiceName == input.ServiceName ||
                    (this.ServiceName != null &&
                    this.ServiceName.Equals(input.ServiceName))
                ) &&
                (
                    this.IsDeployed == input.IsDeployed ||
                    this.IsDeployed.Equals(input.IsDeployed)
                ) &&
                (
                    this.ConfigurationProperties == input.ConfigurationProperties ||
                    this.ConfigurationProperties != null &&
                    input.ConfigurationProperties != null &&
                    this.ConfigurationProperties.SequenceEqual(input.ConfigurationProperties)
                ) &&
                (
                    this.Bindings == input.Bindings ||
                    this.Bindings != null &&
                    input.Bindings != null &&
                    this.Bindings.SequenceEqual(input.Bindings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServiceName != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDeployed.GetHashCode();
                if (this.ConfigurationProperties != null)
                {
                    hashCode = (hashCode * 59) + this.ConfigurationProperties.GetHashCode();
                }
                if (this.Bindings != null)
                {
                    hashCode = (hashCode * 59) + this.Bindings.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
