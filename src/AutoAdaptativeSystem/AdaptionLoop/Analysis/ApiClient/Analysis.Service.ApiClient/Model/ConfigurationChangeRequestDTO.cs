/*
 * Analysis Service
 *
 * Demonstrates all the existing operations to access and manage Adaption Rules.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Analysis.Service.ApiClient.Client.FileParameter;
using OpenAPIDateConverter = Analysis.Service.ApiClient.Client.OpenAPIDateConverter;

namespace Analysis.Service.ApiClient.Model
{
    /// <summary>
    /// ConfigurationChangeRequestDTO
    /// </summary>
    [DataContract(Name = "ConfigurationChangeRequestDTO")]
    public partial class ConfigurationChangeRequestDTO : IEquatable<ConfigurationChangeRequestDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationChangeRequestDTO" /> class.
        /// </summary>
        /// <param name="timestamp">Gets or Sets Timestamp.</param>
        /// <param name="symptoms">Gets or Sets Symptoms.</param>
        /// <param name="requestedChanges">Gets or Sets RequestedChanges.</param>
        public ConfigurationChangeRequestDTO(DateTime timestamp = default(DateTime), List<SymptomDTO> symptoms = default(List<SymptomDTO>), List<ChangeRequestDTO> requestedChanges = default(List<ChangeRequestDTO>))
        {
            this.Timestamp = timestamp;
            this.Symptoms = symptoms;
            this.RequestedChanges = requestedChanges;
        }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        /// <value>Gets or Sets Timestamp</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Symptoms
        /// </summary>
        /// <value>Gets or Sets Symptoms</value>
        [DataMember(Name = "symptoms", EmitDefaultValue = true)]
        public List<SymptomDTO> Symptoms { get; set; }

        /// <summary>
        /// Gets or Sets RequestedChanges
        /// </summary>
        /// <value>Gets or Sets RequestedChanges</value>
        [DataMember(Name = "requestedChanges", EmitDefaultValue = true)]
        public List<ChangeRequestDTO> RequestedChanges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConfigurationChangeRequestDTO {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Symptoms: ").Append(Symptoms).Append("\n");
            sb.Append("  RequestedChanges: ").Append(RequestedChanges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConfigurationChangeRequestDTO);
        }

        /// <summary>
        /// Returns true if ConfigurationChangeRequestDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigurationChangeRequestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigurationChangeRequestDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Symptoms == input.Symptoms ||
                    this.Symptoms != null &&
                    input.Symptoms != null &&
                    this.Symptoms.SequenceEqual(input.Symptoms)
                ) && 
                (
                    this.RequestedChanges == input.RequestedChanges ||
                    this.RequestedChanges != null &&
                    input.RequestedChanges != null &&
                    this.RequestedChanges.SequenceEqual(input.RequestedChanges)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.Symptoms != null)
                {
                    hashCode = (hashCode * 59) + this.Symptoms.GetHashCode();
                }
                if (this.RequestedChanges != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedChanges.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
